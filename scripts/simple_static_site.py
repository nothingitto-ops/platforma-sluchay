#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞
Google Sheets ‚Üí Platforma Manager ‚Üí –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç ‚Üí –î–µ–ø–ª–æ–π
"""

import os
import json
import shutil
import zipfile
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

class SimpleStaticSite:
    def __init__(self):
        self.sheets_id = "1FLlyjpSd9EBOxZC8f0B6-iKRpKCMxcTRqWOHlgUpFoQ"
        
    def load_products_from_sheets(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
        try:
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            
            try:
                creds = ServiceAccountCredentials.from_json_keyfile_name('google_api_config.json', scope)
                client = gspread.authorize(creds)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å ServiceAccountCredentials: {e}")
                import pickle
                with open('token.pickle', 'rb') as token:
                    creds = pickle.load(token)
                client = gspread.authorize(creds)
            
            sheet = client.open_by_key(self.sheets_id).sheet1
            data = sheet.get_all_records()
            
            products = []
            for row in data:
                if not row.get('ID'):
                    continue
                    
                images_str = row.get('Images', '')
                if images_str:
                    images = [img.strip() for img in images_str.split('|') if img.strip()]
                else:
                    images = []
                
                product = {
                    "images": images,
                    "title": row.get('Title', ''),
                    "price": row.get('Price', ''),
                    "desc": row.get('Desc', ''),
                    "meta": row.get('Meta', ''),
                    "link": row.get('Link', 'https://t.me/stub123'),
                    "status": row.get('Status', 'preorder'),
                    "order": int(row.get('Order', 0))  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
                }
                
                products.append(product)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
            products.sort(key=lambda x: x.get('order', 0))
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google Sheets")
            print(f"üìä –ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫: {[p.get('order', 0) for p in products]}")
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {e}")
            return []
    
    def update_site_data(self, products):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
            with open('web/app.min.js', 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ items
            start_marker = 'const items = ['
            end_marker = ']; // –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞'
            
            start_pos = content.find(start_marker)
            if start_pos == -1:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏")
                return False
            
            # –ò—â–µ–º –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
            end_pos = content.find(end_marker, start_pos)
            if end_pos == -1:
                end_pos = content.find('];', start_pos)
                if end_pos == -1:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö")
                    return False
                end_pos += 2
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            new_items = 'const items = [\n'
            for i, product in enumerate(products):
                new_items += f"""  {{
    images: {json.dumps(product['images'], ensure_ascii=False)},
    title: "{product['title']}",
    price: "{product['price']}",
    desc: "{product['desc']}",
    meta: "{product['meta']}",
    link: "{product['link']}",
    status: "{product['status']}"
  }}{',' if i < len(products) - 1 else ''}
"""
            new_items += ']; // –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞'
            
            # –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            new_content = content[:start_pos] + new_items + content[end_pos:]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open('web/app.min.js', 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∞–π—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def create_deploy(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        deploy_folder = f'deploy_temp_{timestamp}'
        
        try:
            os.makedirs(deploy_folder, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å–∞–π—Ç–∞
            web_files = ['index.html', 'styles.min.css', 'app.min.js', 'mobile.overrides.css']
            for file in web_files:
                if os.path.exists(f'web/{file}'):
                    shutil.copy2(f'web/{file}', f'{deploy_folder}/{file}')
                    print(f'‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file}')
            
            # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É img
            if os.path.exists('web/img'):
                shutil.copytree('web/img', f'{deploy_folder}/img')
                print('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: img')
            
            # –°–æ–∑–¥–∞–µ–º ZIP
            zip_filename = f'platforma_simple_deploy_{timestamp}.zip'
            with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(deploy_folder):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, deploy_folder)
                        zipf.write(file_path, arcname)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            shutil.rmtree(deploy_folder)
            
            print(f'‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ–ø–ª–æ–π: {zip_filename}')
            return zip_filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–ª–æ—è: {e}")
            return None
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞"""
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞...")
        print("üìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Google Sheets ‚Üí Platforma Manager ‚Üí –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        products = self.load_products_from_sheets()
        
        if not products:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–π—Ç
        success = self.update_site_data(products)
        
        if success:
            # –°–æ–∑–¥–∞–µ–º –¥–µ–ø–ª–æ–π
            deploy_file = self.create_deploy()
            
            print("\nüéâ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω!")
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
            if deploy_file:
                print(f"   - –î–µ–ø–ª–æ–π: {deploy_file}")
            print("\nüîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
            print("   ‚úÖ Google Sheets –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            print("   ‚úÖ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏")
            print("   ‚úÖ –î–µ–ø–ª–æ–π –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç API –∫–ª—é—á–µ–π")
            print("\nüí° –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:")
            print("   1. –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ Google Sheets")
            print("   2. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç")
            print("   3. –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–µ–ø–ª–æ–π –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞")
        
        return success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    site = SimpleStaticSite()
    site.run()

if __name__ == "__main__":
    main()
