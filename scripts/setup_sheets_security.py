#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã Google Sheets
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à–µ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
"""

import os
import json
import hashlib
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

class SheetsSecuritySetup:
    def __init__(self):
        self.sheets_id = "1FLlyjpSd9EBOxZC8f0B6-iKRpKCMxcTRqWOHlgUpFoQ"
        
    def _create_row_hash(self, row_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞
        sorted_data = dict(sorted(row_data.items()))
        data_string = json.dumps(sorted_data, ensure_ascii=False, sort_keys=True)
        return hashlib.sha256(data_string.encode()).hexdigest()
    
    def add_integrity_hashes(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à–µ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API —Å OAuth2
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º OAuth2 —Ç–æ–∫–µ–Ω
                creds = ServiceAccountCredentials.from_json_keyfile_name('google_api_config.json', scope)
                client = gspread.authorize(creds)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å ServiceAccountCredentials: {e}")
                # –ü—Ä–æ–±—É–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º OAuth2
                import pickle
                with open('token.pickle', 'rb') as token:
                    creds = pickle.load(token)
                client = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            sheet = client.open_by_key(self.sheets_id).sheet1
            data = sheet.get_all_records()
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ Hash
            headers = sheet.row_values(1)
            hash_column_index = None
            
            if 'Hash' in headers:
                hash_column_index = headers.index('Hash') + 1
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ Hash —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É Hash
                hash_column_index = len(headers) + 1
                sheet.update_cell(1, hash_column_index, 'Hash')
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ Hash")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
            updated_count = 0
            for i, row in enumerate(data, start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Ö–µ—à–∞
                row_without_hash = {k: v for k, v in row.items() if k != 'Hash'}
                
                # –°–æ–∑–¥–∞–µ–º —Ö–µ—à
                row_hash = self._create_row_hash(row_without_hash)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à –≤ —Ç–∞–±–ª–∏—Ü–µ
                current_hash = row.get('Hash', '')
                if current_hash != row_hash:
                    sheet.update_cell(i, hash_column_index, row_hash)
                    updated_count += 1
                    print(f"  üìù –°—Ç—Ä–æ–∫–∞ {i}: –æ–±–Ω–æ–≤–ª–µ–Ω —Ö–µ—à –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{row.get('Title', 'Unknown')}'")
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ö–µ—à–µ–π: {updated_count}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–µ—à–µ–π: {e}")
            return False
    
    def setup_access_permissions(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API —Å OAuth2
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                creds = ServiceAccountCredentials.from_json_keyfile_name('google_api_config.json', scope)
                client = gspread.authorize(creds)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å ServiceAccountCredentials: {e}")
                import pickle
                with open('token.pickle', 'rb') as token:
                    creds = pickle.load(token)
                client = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = client.open_by_key(self.sheets_id)
            
            print("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            permissions = spreadsheet.list_permissions()
            
            print(f"üìã –¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:")
            for perm in permissions:
                print(f"  - {perm.get('emailAddress', 'Unknown')}: {perm.get('role', 'Unknown')}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            print("\nüîê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
            print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É")
            print("2. –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–∞–±–ª–∏—Ü—É –ø—É–±–ª–∏—á–Ω–æ")
            print("3. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∫–ª—é—á–∏ API")
            print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")
            return False
    
    def create_backup_sheet(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API —Å OAuth2
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                creds = ServiceAccountCredentials.from_json_keyfile_name('google_api_config.json', scope)
                client = gspread.authorize(creds)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å ServiceAccountCredentials: {e}")
                import pickle
                with open('token.pickle', 'rb') as token:
                    creds = pickle.load(token)
                client = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            main_sheet = client.open_by_key(self.sheets_id)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_title = f"Platforma_Backup_{timestamp}"
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
            backup_sheet = main_sheet.copy(title=backup_title)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_title}")
            print(f"üîó –°—Å—ã–ª–∫–∞: {backup_sheet.url}")
            
            return backup_sheet.url
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None
    
    def validate_data_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API —Å OAuth2
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                creds = ServiceAccountCredentials.from_json_keyfile_name('google_api_config.json', scope)
                client = gspread.authorize(creds)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å ServiceAccountCredentials: {e}")
                import pickle
                with open('token.pickle', 'rb') as token:
                    creds = pickle.load(token)
                client = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            sheet = client.open_by_key(self.sheets_id).sheet1
            data = sheet.get_all_records()
            
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
            
            valid_rows = 0
            invalid_rows = 0
            
            for i, row in enumerate(data, start=2):
                row_hash = row.get('Hash', '')
                row_without_hash = {k: v for k, v in row.items() if k != 'Hash'}
                
                if row_hash:
                    calculated_hash = self._create_row_hash(row_without_hash)
                    if row_hash == calculated_hash:
                        valid_rows += 1
                    else:
                        invalid_rows += 1
                        print(f"  ‚ùå –°—Ç—Ä–æ–∫–∞ {i}: –Ω–∞—Ä—É—à–µ–Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{row.get('Title', 'Unknown')}'")
                else:
                    invalid_rows += 1
                    print(f"  ‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö–µ—à –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{row.get('Title', 'Unknown')}'")
            
            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            print(f"  - –í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {valid_rows}")
            print(f"  - –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {invalid_rows}")
            
            return valid_rows, invalid_rows
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
            return 0, 0
    
    def run_full_setup(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Google Sheets...")
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        print("\n1Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à–µ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...")
        if self.add_integrity_hashes():
            print("‚úÖ –•–µ—à–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–µ—à–µ–π")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
        valid, invalid = self.validate_data_integrity()
        
        if invalid > 0:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {invalid} —Å—Ç—Ä–æ–∫ —Å –Ω–∞—Ä—É—à–µ–Ω–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é")
        
        # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        print("\n3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
        self.setup_access_permissions()
        
        # 4. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        backup_url = self.create_backup_sheet()
        
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üîí Google Sheets —Ç–µ–ø–µ—Ä—å –∑–∞—â–∏—â–µ–Ω:")
        print("  - –•–µ—à–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        print("  - –î–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("  - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        if backup_url:
            print(f"  - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_url}")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup = SheetsSecuritySetup()
    setup.run_full_setup()

if __name__ == "__main__":
    main()
