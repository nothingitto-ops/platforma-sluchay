#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞ –∏–∑ Google Sheets
Google Sheets –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏
"""

import os
import json
import shutil
import zipfile
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

class StaticSiteCreator:
    def __init__(self):
        self.sheets_id = "1FLlyjpSd9EBOxZC8f0B6-iKRpKCMxcTRqWOHlgUpFoQ"
        
    def load_products_from_sheets(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API —Å OAuth2
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                creds = ServiceAccountCredentials.from_json_keyfile_name('google_api_config.json', scope)
                client = gspread.authorize(creds)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å ServiceAccountCredentials: {e}")
                # –ü—Ä–æ–±—É–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º OAuth2
                import pickle
                with open('token.pickle', 'rb') as token:
                    creds = pickle.load(token)
                client = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            sheet = client.open_by_key(self.sheets_id).sheet1
            data = sheet.get_all_records()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            products = []
            for row in data:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ ID
                if not row.get('ID'):
                    continue
                    
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤
                images_str = row.get('Images', '')
                if images_str:
                    images = [img.strip() for img in images_str.split('|') if img.strip()]
                else:
                    images = []
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
                product = {
                    "id": str(row.get('ID', '')),
                    "order": str(row.get('Order', '')),
                    "section": row.get('Section', 'home'),
                    "title": row.get('Title', ''),
                    "price": row.get('Price', ''),
                    "desc": row.get('Desc', ''),
                    "meta": row.get('Meta', ''),
                    "status": row.get('Status', 'preorder'),
                    "images": images,
                    "link": row.get('Link', 'https://t.me/stub123')
                }
                
                products.append(product)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
            products.sort(key=lambda x: int(x.get('order', 0)))
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google Sheets")
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {e}")
            return []
    
    def create_static_site(self, products):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª app.min.js
            original_file = 'web/app.min.js'
            if not os.path.exists(original_file):
                print(f"‚ùå –§–∞–π–ª {original_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open(original_file, 'r', encoding='utf-8') as f:
                original_content = f.read()
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
            data_start = original_content.find('const items = [')
            if data_start == -1:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ app.min.js")
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ items
            brace_count = 0
            in_items = False
            data_end = data_start
            for i, char in enumerate(original_content[data_start:], data_start):
                if char == '[':
                    brace_count += 1
                    in_items = True
                elif char == ']':
                    brace_count -= 1
                    if in_items and brace_count == 0:
                        data_end = i + 1
                        break
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            new_data = f"""const items = {json.dumps(products, ensure_ascii=False, indent=2)};"""
            
            # –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ
            new_content = original_content[:data_start] + new_data + original_content[data_end:]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open('web/app.min.js', 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            update_info = {
                'timestamp': datetime.now().isoformat(),
                'products_count': len(products),
                'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'sections': list(set(p.get('section', '') for p in products)),
                'note': '–°–∞–π—Ç —Å–æ–∑–¥–∞–Ω –∏–∑ Google Sheets, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏'
            }
            
            with open('web/site_info.json', 'w', encoding='utf-8') as f:
                json.dump(update_info, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            print(f"üìù –§–∞–π–ª app.min.js –æ–±–Ω–æ–≤–ª–µ–Ω")
            print(f"üìä –†–∞–∑–¥–µ–ª—ã: {', '.join(update_info['sections'])}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞: {e}")
            return False
    
    def create_deploy(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        deploy_folder = f'deploy_temp_{timestamp}'
        
        try:
            os.makedirs(deploy_folder, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å–∞–π—Ç–∞
            web_files = ['index.html', 'styles.min.css', 'app.min.js', 'mobile.overrides.css']
            for file in web_files:
                if os.path.exists(f'web/{file}'):
                    shutil.copy2(f'web/{file}', f'{deploy_folder}/{file}')
                    print(f'‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file}')
            
            # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É img
            if os.path.exists('web/img'):
                shutil.copytree('web/img', f'{deploy_folder}/img')
                print('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: img')
            
            # –°–æ–∑–¥–∞–µ–º ZIP
            zip_filename = f'platforma_static_deploy_{timestamp}.zip'
            with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(deploy_folder):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, deploy_folder)
                        zipf.write(file_path, arcname)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            shutil.rmtree(deploy_folder)
            
            print(f'‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π: {zip_filename}')
            return zip_filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–ª–æ—è: {e}")
            return None
    
    def run_creation(self):
        """–ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞"""
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞ –∏–∑ Google Sheets...")
        print("üìã Google Sheets –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("üåê –°–∞–π—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ —Å–≤—è–∑–∏ —Å Google Sheets")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        products = self.load_products_from_sheets()
        
        if not products:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç
        success = self.create_static_site(products)
        
        if success:
            # –°–æ–∑–¥–∞–µ–º –¥–µ–ø–ª–æ–π
            deploy_file = self.create_deploy()
            
            print("\nüéâ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
            print(f"   - –†–∞–∑–¥–µ–ª–æ–≤: {len(set(p.get('section', '') for p in products))}")
            if deploy_file:
                print(f"   - –î–µ–ø–ª–æ–π: {deploy_file}")
            print("\nüí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
            print("   1. –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ Google Sheets")
            print("   2. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞")
            print("   3. –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–µ–ø–ª–æ–π –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥")
            print("   4. –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ —Å–≤—è–∑–∏ —Å Google Sheets")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞")
        
        return success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    creator = StaticSiteCreator()
    creator.run_creation()

if __name__ == "__main__":
    main()
