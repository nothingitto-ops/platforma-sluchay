#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º —Å–∞–π—Ç–∞
"""

import os
import json
import hashlib
from datetime import datetime
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from cryptography.fernet import Fernet
import gspread
from oauth2client.service_account import ServiceAccountCredentials

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–∞

class SecureAPI:
    def __init__(self):
        self.sheets_id = "1FLlyjpSd9EBOxZC8f0B6-iKRpKCMxcTRqWOHlgUpFoQ"
        self.encryption_key = self._get_encryption_key()
        self.cipher_suite = Fernet(self.encryption_key)
        self.cache = {}
        self.cache_timeout = 300  # 5 –º–∏–Ω—É—Ç
        
    def _get_encryption_key(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        key = os.getenv('SITE_ENCRYPTION_KEY')
        if not key:
            raise ValueError("SITE_ENCRYPTION_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return key.encode()
    
    def _create_data_hash(self, data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if isinstance(data, str):
            data = data.encode()
        return hashlib.sha256(data).hexdigest()
    
    def load_products_from_sheets(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = 'products'
            if cache_key in self.cache:
                cache_time, cache_data = self.cache[cache_key]
                if (datetime.now() - cache_time).seconds < self.cache_timeout:
                    return cache_data
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            creds = ServiceAccountCredentials.from_json_keyfile_name('google_api_config.json', scope)
            client = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            sheet = client.open_by_key(self.sheets_id).sheet1
            data = sheet.get_all_records()
            
            products = []
            for row in data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                row_hash = row.get('Hash', '')
                row_data = {k: v for k, v in row.items() if k != 'Hash'}
                
                # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                calculated_hash = self._create_data_hash(json.dumps(row_data, sort_keys=True))
                
                if row_hash and row_hash != calculated_hash:
                    print(f"‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID: {row.get('ID', 'Unknown')}")
                    continue
                
                products.append(row_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.cache[cache_key] = (datetime.now(), products)
            
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {e}")
            return []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
api = SecureAPI()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return send_from_directory('../web', 'index.html')

@app.route('/<path:filename>')
def serve_static(filename):
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    return send_from_directory('../web', filename)

@app.route('/api/products')
def get_products():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        products = api.load_products_from_sheets()
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–∞–Ω–Ω—ã—Ö
        products_json = json.dumps(products, ensure_ascii=False, sort_keys=True)
        data_hash = api._create_data_hash(products_json)
        
        response = {
            'success': True,
            'products': products,
            'hash': data_hash,
            'timestamp': datetime.now().isoformat(),
            'count': len(products)
        }
        
        return jsonify(response)
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/decrypt', methods=['POST'])
def decrypt_data():
    """API –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = request.get_json()
        encrypted_data = data.get('data')
        
        if not encrypted_data:
            return jsonify({'error': 'No data provided'}), 400
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        decrypted_data = api.cipher_suite.decrypt(encrypted_data.encode()).decode()
        products = json.loads(decrypted_data)
        
        return jsonify({
            'success': True,
            'products': products,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/status')
def get_status():
    """API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        products = api.load_products_from_sheets()
        
        return jsonify({
            'success': True,
            'status': 'online',
            'products_count': len(products),
            'last_update': datetime.now().isoformat(),
            'cache_status': 'active' if 'products' in api.cache else 'empty'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'version': '1.0.0'
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üîí API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:5001")
    print("üìä Endpoints:")
    print("   - GET  /api/products - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")
    print("   - POST /api/decrypt  - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("   - GET  /api/status   - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")
    print("   - GET  /api/health   - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    
    app.run(host='0.0.0.0', port=5001, debug=False)
