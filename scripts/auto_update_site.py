#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ —á–µ—Ä–µ–∑ Google Sheets
–ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
"""

import os
import json
import hashlib
import base64
import time
from datetime import datetime
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials

class SecureSiteUpdater:
    def __init__(self):
        self.sheets_id = "1FLlyjpSd9EBOxZC8f0B6-iKRpKCMxcTRqWOHlgUpFoQ"
        self.encryption_key = self._get_encryption_key()
        self.cipher_suite = Fernet(self.encryption_key)
        
    def _get_encryption_key(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ"""
        key = os.getenv('SITE_ENCRYPTION_KEY')
        if not key:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
            key = Fernet.generate_key()
            print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {key.decode()}")
            print("‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è SITE_ENCRYPTION_KEY")
        else:
            key = key.encode()
        return key
    
    def _encrypt_data(self, data):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        if isinstance(data, str):
            data = data.encode()
        return self.cipher_suite.encrypt(data)
    
    def _decrypt_data(self, encrypted_data):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        return self.cipher_suite.decrypt(encrypted_data).decode()
    
    def _create_data_hash(self, data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
        if isinstance(data, str):
            data = data.encode()
        return hashlib.sha256(data).hexdigest()
    
    def load_products_from_sheets(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API —Å OAuth2
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                creds = ServiceAccountCredentials.from_json_keyfile_name('google_api_config.json', scope)
                client = gspread.authorize(creds)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å ServiceAccountCredentials: {e}")
                # –ü—Ä–æ–±—É–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º OAuth2
                import pickle
                with open('token.pickle', 'rb') as token:
                    creds = pickle.load(token)
                client = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            sheet = client.open_by_key(self.sheets_id).sheet1
            data = sheet.get_all_records()
            
            products = []
            for row in data:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
                # row_hash = row.get('Hash', '')
                # row_data = {k: v for k, v in row.items() if k != 'Hash'}
                
                # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                # calculated_hash = self._create_data_hash(json.dumps(row_data, sort_keys=True))
                
                # if row_hash and row_hash != calculated_hash:
                #     print(f"‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID: {row.get('ID', 'Unknown')}")
                #     continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–µ—à–∞
                products.append(row)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google Sheets")
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {e}")
            return []
    
    def update_site_files(self, products):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–∞–π—Ç–∞ —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            products_json = json.dumps(products, ensure_ascii=False, indent=2)
            encrypted_data = self._encrypt_data(products_json)
            data_hash = self._create_data_hash(products_json)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π JavaScript —Ñ–∞–π–ª
            js_content = f"""
// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∞–π—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è)
// –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
// –•–µ—à –¥–∞–Ω–Ω—ã—Ö: {data_hash}

const ENCRYPTED_DATA = "{base64.b64encode(encrypted_data).decode()}";
const DATA_HASH = "{data_hash}";

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function decryptData(encryptedData) {{
    try {{
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
        return fetch('/api/decrypt', {{
            method: 'POST',
            headers: {{ 'Content-Type': 'application/json' }},
            body: JSON.stringify({{ data: encryptedData }})
        }}).then(response => response.json());
    }} catch (error) {{
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
        return null;
    }}
}}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadSecureData() {{
    try {{
        const response = await fetch('/api/products');
        if (response.ok) {{
            const data = await response.json();
            return data.products;
        }}
    }} catch (error) {{
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }}
    
    // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    return {products_json};
}}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let items = [];
loadSecureData().then(data => {{
    items = data;
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', items.length, '—Ç–æ–≤–∞—Ä–æ–≤');
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (typeof updateInterface === 'function') {{
        updateInterface();
    }}
}});
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open('web/app.min.js', 'w', encoding='utf-8') as f:
                f.write(js_content)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ö–µ—à–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            hash_file = {
                'timestamp': datetime.now().isoformat(),
                'hash': data_hash,
                'products_count': len(products),
                'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            with open('web/data_hash.json', 'w', encoding='utf-8') as f:
                json.dump(hash_file, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –°–∞–π—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            print(f"üîí –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞—â–∏—â–µ–Ω—ã")
            print(f"üìù –•–µ—à –¥–∞–Ω–Ω—ã—Ö: {data_hash}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞: {e}")
            return False
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_dir = f'backups/site_backup_{timestamp}'
        
        try:
            os.makedirs(backup_dir, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å–∞–π—Ç–∞
            import shutil
            shutil.copy2('web/app.min.js', f'{backup_dir}/app.min.js')
            shutil.copy2('web/index.html', f'{backup_dir}/index.html')
            shutil.copy2('web/styles.min.css', f'{backup_dir}/styles.min.css')
            
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_dir}")
            return backup_dir
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None
    
    def run_update(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_dir = self.create_backup()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        products = self.load_products_from_sheets()
        
        if not products:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–∞–π—Ç–∞
        success = self.update_site_files(products)
        
        if success:
            print("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("üîí –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º")
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
            print(f"   - –†–∞–∑–¥–µ–ª–æ–≤: {len(set(p.get('section', '') for p in products))}")
            print(f"   - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_dir}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞")
        
        return success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    updater = SecureSiteUpdater()
    updater.run_update()

if __name__ == "__main__":
    main()
