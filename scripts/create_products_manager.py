#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
–°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –±–µ–∑ Google Sheets
"""

import os
import json
import shutil
import zipfile
import re
from datetime import datetime
import sys

class ProductsManager:
    def __init__(self):
        self.products_file = "products_data.json"
        self.web_dir = "../web_combined_working"
        self.images_dir = "../img"
        self.products = self.load_products()
        
    def load_products(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.products_file):
            try:
                with open(self.products_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {self.products_file}")
                    return data
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
                return []
        else:
            print("üìù –§–∞–π–ª —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            return []
    
    def save_products(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.products_file, 'w', encoding='utf-8') as f:
                json.dump(self.products, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.products_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    def add_product(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        print("\nüÜï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –¢–û–í–ê–†–ê")
        print("=" * 40)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
        existing_ids = [p.get('id', '') for p in self.products]
        product_id = f"product_{len(self.products) + 1}"
        while product_id in existing_ids:
            product_id = f"product_{len(self.products) + 2}"
        
        # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        title = input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ").strip()
        if not title:
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!")
            return
        
        price = input("–¶–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3 500 ‚ÇΩ): ").strip()
        if not price:
            print("‚ùå –¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!")
            return
        
        desc = input("–û–ø–∏—Å–∞–Ω–∏–µ: ").strip()
        meta = input("–°–æ—Å—Ç–∞–≤ –∏ —É—Ö–æ–¥: ").strip()
        
        # –°—Ç–∞—Ç—É—Å
        print("\n–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞:")
        print("1. –í –Ω–∞–ª–∏—á–∏–∏ (stock)")
        print("2. –ü–æ–¥ –∑–∞–∫–∞–∑ (preorder)")
        status_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (1 –∏–ª–∏ 2): ").strip()
        status = "stock" if status_choice == "1" else "preorder"
        
        # –°—Å—ã–ª–∫–∞
        link = input("–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram (Enter –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π): ").strip()
        if not link:
            link = "https://t.me/stub123"
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print(f"\nüìÅ –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {self.images_dir}/{product_id}/")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ")
        print("–§–æ—Ä–º–∞—Ç –∏–º–µ–Ω: product_id_1.jpg, product_id_2.jpg, –∏ —Ç.–¥.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images_path = os.path.join(self.images_dir, product_id)
        images = []
        if os.path.exists(images_path):
            for file in sorted(os.listdir(images_path)):
                if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                    images.append(f"{product_id}/{file}")
        
        if not images:
            print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            create_images = input("–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π? (y/n): ").strip().lower()
            if create_images == 'y':
                os.makedirs(images_path, exist_ok=True)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {images_path}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        product = {
            "id": product_id,
            "title": title,
            "price": price,
            "desc": desc,
            "meta": meta,
            "status": status,
            "link": link,
            "section": "home",
            "images": images
        }
        
        self.products.append(product)
        self.save_products()
        print(f"‚úÖ –¢–æ–≤–∞—Ä '{title}' –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    def edit_product(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        if not self.products:
            print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print("\n‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–ê")
        print("=" * 40)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        for i, product in enumerate(self.products, 1):
            print(f"{i}. {product['title']} - {product['price']}")
        
        try:
            choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä (1-{len(self.products)}): ")) - 1
            if choice < 0 or choice >= len(self.products):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
                return
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return
        
        product = self.products[choice]
        print(f"\n–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º: {product['title']}")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
        title = input(f"–ù–∞–∑–≤–∞–Ω–∏–µ ({product['title']}): ").strip()
        if title:
            product['title'] = title
        
        price = input(f"–¶–µ–Ω–∞ ({product['price']}): ").strip()
        if price:
            product['price'] = price
        
        desc = input(f"–û–ø–∏—Å–∞–Ω–∏–µ ({product['desc']}): ").strip()
        if desc:
            product['desc'] = desc
        
        meta = input(f"–°–æ—Å—Ç–∞–≤ ({product['meta']}): ").strip()
        if meta:
            product['meta'] = meta
        
        link = input(f"–°—Å—ã–ª–∫–∞ ({product['link']}): ").strip()
        if link:
            product['link'] = link
        
        # –°—Ç–∞—Ç—É—Å
        print(f"\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {product['status']}")
        print("1. –í –Ω–∞–ª–∏—á–∏–∏ (stock)")
        print("2. –ü–æ–¥ –∑–∞–∫–∞–∑ (preorder)")
        status_choice = input("–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if status_choice == "1":
            product['status'] = "stock"
        elif status_choice == "2":
            product['status'] = "preorder"
        
        self.save_products()
        print("‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!")
    
    def delete_product(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        if not self.products:
            print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        print("\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê")
        print("=" * 40)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        for i, product in enumerate(self.products, 1):
            print(f"{i}. {product['title']} - {product['price']}")
        
        try:
            choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(self.products)}): ")) - 1
            if choice < 0 or choice >= len(self.products):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
                return
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return
        
        product = self.products[choice]
        confirm = input(f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{product['title']}'? (y/n): ").strip().lower()
        
        if confirm == 'y':
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            images_path = os.path.join(self.images_dir, product['id'])
            if os.path.exists(images_path):
                shutil.rmtree(images_path)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_path}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
            del self.products[choice]
            self.save_products()
            print("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")
        else:
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    def list_products(self):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        if not self.products:
            print("üìù –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            return
        
        print("\nüìã –°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í")
        print("=" * 60)
        
        for i, product in enumerate(self.products, 1):
            status_icon = "‚úÖ" if product['status'] == 'stock' else "‚è≥"
            print(f"{i}. {status_icon} {product['title']}")
            print(f"   üí∞ {product['price']}")
            print(f"   üìù {product['desc']}")
            print(f"   üñºÔ∏è {len(product['images'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            print(f"   üîó {product['link']}")
            print("-" * 40)
    
    def update_app_js(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ app.min.js —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        print("\nüîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï APP.MIN.JS")
        print("=" * 40)
        
        if not os.path.exists(self.web_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {self.web_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        app_js_path = os.path.join(self.web_dir, "app.min.js")
        if not os.path.exists(app_js_path):
            print(f"‚ùå –§–∞–π–ª {app_js_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
            with open(app_js_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
            products_json = json.dumps(self.products, ensure_ascii=False, indent=2)
            
            # –ó–∞–º–µ–Ω—è–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
            pattern = r'const products = \[.*?\];'
            replacement = f'const products = {products_json};'
            
            if re.search(pattern, content, re.DOTALL):
                new_content = re.sub(pattern, replacement, content, flags=re.DOTALL)
                
                # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
                backup_path = f"{app_js_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                shutil.copy2(app_js_path, backup_path)
                print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                with open(app_js_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                print(f"‚úÖ app.min.js –æ–±–Ω–æ–≤–ª–µ–Ω —Å {len(self.products)} —Ç–æ–≤–∞—Ä–∞–º–∏")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ app.min.js")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è app.min.js: {e}")
    
    def create_deploy(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è"""
        print("\nüöÄ –°–û–ó–î–ê–ù–ò–ï –î–ï–ü–õ–û–Ø")
        print("=" * 40)
        
        if not os.path.exists(self.web_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {self.web_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–µ–ø–ª–æ—è
        deploy_dir = f"deploy_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        os.makedirs(deploy_dir, exist_ok=True)
        
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            for item in os.listdir(self.web_dir):
                src = os.path.join(self.web_dir, item)
                dst = os.path.join(deploy_dir, item)
                
                if os.path.isdir(src):
                    shutil.copytree(src, dst)
                else:
                    shutil.copy2(src, dst)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if os.path.exists(self.images_dir):
                img_dst = os.path.join(deploy_dir, "img")
                shutil.copytree(self.images_dir, img_dst)
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            zip_name = f"{deploy_dir}.zip"
            with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(deploy_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, deploy_dir)
                        zipf.write(file_path, arcname)
            
            print(f"‚úÖ –î–µ–ø–ª–æ–π —Å–æ–∑–¥–∞–Ω: {zip_name}")
            print(f"üìÅ –ü–∞–ø–∫–∞ –¥–µ–ø–ª–æ—è: {deploy_dir}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–ª–æ—è: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        while True:
            print("\n" + "=" * 50)
            print("üõçÔ∏è –ú–ï–ù–ï–î–ñ–ï–† –¢–û–í–ê–†–û–í –ü–õ–ê–¢–§–û–†–ú–´")
            print("=" * 50)
            print("1. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã")
            print("2. üÜï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
            print("3. ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
            print("4. üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
            print("5. üîÑ –û–±–Ω–æ–≤–∏—Ç—å app.min.js")
            print("6. üöÄ –°–æ–∑–¥–∞—Ç—å –¥–µ–ø–ª–æ–π")
            print("7. üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
            print("0. üö™ –í—ã—Ö–æ–¥")
            
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            
            if choice == "1":
                self.list_products()
            elif choice == "2":
                self.add_product()
            elif choice == "3":
                self.edit_product()
            elif choice == "4":
                self.delete_product()
            elif choice == "5":
                self.update_app_js()
            elif choice == "6":
                self.create_deploy()
            elif choice == "7":
                self.save_products()
            elif choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    manager = ProductsManager()
    manager.run()
