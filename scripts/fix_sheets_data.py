#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
from datetime import datetime

def fix_sheets_data():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    try:
        with open('sheets_data.json', 'r', encoding='utf-8') as f:
            sheets_data = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sheets_data)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google Sheets")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Google Sheets: {e}")
        return False
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    fixed_items = []
    
    for sheet_product in sheets_data:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:
        # id, section, title, price, desc, meta, status, images, link
        
        product_id = sheet_product.get('id', '')
        section = sheet_product.get('section', '')
        title = sheet_product.get('title', '')
        price = sheet_product.get('price', '')
        desc = sheet_product.get('desc', '')
        meta = sheet_product.get('meta', '')
        status = sheet_product.get('status', '')
        images = sheet_product.get('images', '')
        link = sheet_product.get('link', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
        try:
            order = int(product_id) if product_id.isdigit() else 999
        except:
            order = 999
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–∞
        item = {
            "images": images.split(',') if images else [],
            "title": title,
            "price": price,
            "desc": desc,
            "meta": meta,
            "link": link,
            "status": status,
            "order": order
        }
        
        fixed_items.append(item)
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {title} - {price}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
    fixed_items.sort(key=lambda x: x.get('order', 999))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        with open('fixed_sheets_data.json', 'w', encoding='utf-8') as f:
            json.dump(fixed_items, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ fixed_sheets_data.json")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False
    
    print(f"\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –¢–æ–≤–∞—Ä–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(fixed_items)}")
    print(f"   - –í—Ä–µ–º—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    print(f"\nüìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:")
    for item in fixed_items:
        print(f"   ‚Ä¢ {item['title']} - {item['price']}")
    
    return True

if __name__ == "__main__":
    fix_sheets_data()
