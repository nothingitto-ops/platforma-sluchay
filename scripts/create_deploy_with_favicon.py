#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import zipfile
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont

def create_favicon():
    """–°–æ–∑–¥–∞–µ–º favicon —Å –±—É–∫–≤–∞–º–∏ PS"""
    
    print("üé® –°–æ–∑–¥–∞–µ–º favicon —Å –±—É–∫–≤–∞–º–∏ PS...")
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 32x32
    size = 32
    img = Image.new('RGBA', (size, size), (44, 62, 80, 255))  # #2c3e50
    draw = ImageDraw.Draw(img)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
    try:
        # –î–ª—è macOS
        font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 16)
    except:
        try:
            # –î–ª—è Linux
            font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 16)
        except:
            # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font = ImageFont.load_default()
    
    # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç "PS"
    text = "PS"
    bbox = draw.textbbox((0, 0), text, font=font)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]
    
    x = (size - text_width) // 2
    y = (size - text_height) // 2
    
    draw.text((x, y), text, fill=(255, 255, 255, 255), font=font)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
    img.save('web/favicon.png')
    print("‚úÖ Favicon PNG —Å–æ–∑–¥–∞–Ω: web/favicon.png")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ 16x16 –≤–µ—Ä—Å–∏—é
    img_small = img.resize((16, 16), Image.Resampling.LANCZOS)
    img_small.save('web/favicon-16x16.png')
    print("‚úÖ Favicon 16x16 —Å–æ–∑–¥–∞–Ω: web/favicon-16x16.png")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ 48x48 –≤–µ—Ä—Å–∏—é
    img_large = img.resize((48, 48), Image.Resampling.LANCZOS)
    img_large.save('web/favicon-48x48.png')
    print("‚úÖ Favicon 48x48 —Å–æ–∑–¥–∞–Ω: web/favicon-48x48.png")
    
    return True

def update_index_html():
    """–û–±–Ω–æ–≤–ª—è–µ–º index.html —Å favicon"""
    
    print("üìù –û–±–Ω–æ–≤–ª—è–µ–º index.html —Å favicon...")
    
    index_path = 'web/index.html'
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π index.html
    try:
        with open(index_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {index_path}: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ favicon
    if 'favicon.png' in content:
        print("‚úÖ Favicon —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ index.html")
        return True
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π favicon –Ω–∞ –Ω–æ–≤—ã–π
    old_favicon = '<!-- Favicon - –ø—É—Å—Ç–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 404 –æ—à–∏–±–æ–∫ -->\n<link rel="icon" href="data:,">'
    new_favicon = '''<!-- Favicon -->
<link rel="icon" type="image/png" sizes="32x32" href="favicon.png">
<link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png">
<link rel="icon" type="image/png" sizes="48x48" href="favicon-48x48.png">'''
    
    if old_favicon in content:
        content = content.replace(old_favicon, new_favicon)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ä–æ–≥–æ favicon, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ title
        title_pos = content.find('<title>')
        if title_pos != -1:
            title_end = content.find('</title>', title_pos) + 8
            content = content[:title_end] + '\n\n' + new_favicon + '\n' + content[title_end:]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        with open(index_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print("‚úÖ index.html –æ–±–Ω–æ–≤–ª–µ–Ω —Å favicon")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {index_path}: {e}")
        return False

def create_deploy_archive():
    """–°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è"""
    
    print("üì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∞—Ä—Ö–∏–≤–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    archive_name = f"platforma_deploy_{timestamp}.zip"
    archive_path = f"../{archive_name}"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É web
    os.chdir('web')
    
    try:
        with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤
            def add_to_zip(path, arcname=None):
                if os.path.isfile(path):
                    zipf.write(path, arcname or path)
                    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {path}")
                elif os.path.isdir(path):
                    for root, dirs, files in os.walk(path):
                        for file in files:
                            file_path = os.path.join(root, file)
                            arc_path = os.path.relpath(file_path, '.')
                            zipf.write(file_path, arc_path)
                            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {arc_path}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
            main_files = [
                'index.html',
                'app.min.js',
                'styles.min.css',
                'card-titles.css',
                'mobile.overrides.css',
                'favicon.png',
                'favicon-16x16.png',
                'favicon-48x48.png'
            ]
            
            for file in main_files:
                if os.path.exists(file):
                    add_to_zip(file)
                else:
                    print(f"  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É img
            if os.path.exists('img'):
                add_to_zip('img')
            else:
                print("  ‚ö†Ô∏è  –ü–∞–ø–∫–∞ img –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
            additional_files = [
                'data_hash.json',
                'site_info.json'
            ]
            
            for file in additional_files:
                if os.path.exists(file):
                    add_to_zip(file)
        
        print(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
        size_mb = os.path.getsize(archive_path) / (1024 * 1024)
        print(f"üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {size_mb:.1f} MB")
        
        return archive_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è —Å favicon...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
    if not os.path.exists('web'):
        print("‚ùå –ü–∞–ø–∫–∞ 'web' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
        return False
    
    # –°–æ–∑–¥–∞–µ–º favicon
    if not create_favicon():
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è favicon")
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º index.html
    if not update_index_html():
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è index.html")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    archive_path = create_deploy_archive()
    if not archive_path:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞")
        return False
    
    print("=" * 50)
    print("üéâ –î–µ–ø–ª–æ–π —Å favicon –≥–æ—Ç–æ–≤!")
    print(f"üì¶ –ê—Ä—Ö–∏–≤: {archive_path}")
    print("‚úÖ Favicon —Å –±—É–∫–≤–∞–º–∏ 'PS' –¥–æ–±–∞–≤–ª–µ–Ω")
    print("‚úÖ index.html –æ–±–Ω–æ–≤–ª–µ–Ω")
    print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤")
    print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –≤—ã–∫–ª–∞–¥–∫–µ –Ω–∞ —Å–∞–π—Ç!")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
