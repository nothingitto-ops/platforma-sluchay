#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–∞–π—Ç–µ –∏–∑ Google Sheets
"""

import os
import json
import shutil
from datetime import datetime

def load_products_from_sheets():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
    try:
        from auto_update_oauth2 import full_sync_oauth2
        print("üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets...")
        full_sync_oauth2()
        
        if os.path.exists('products.json'):
            with open('products.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            print("‚ùå –§–∞–π–ª products.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Sheets: {e}")
        return []

def convert_to_website_format(products):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∞–π—Ç–∞"""
    website_items = []
    
    for product in products:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = []
        if product.get('images'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            images_str = product['images']
            if isinstance(images_str, str):
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π, –∞ –∑–∞—Ç–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —á–µ—Ä—Ç–µ
                image_parts = images_str.split(',')
                for part in image_parts:
                    part = part.strip()
                    if '|' in part:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –Ω–µ–π
                        sub_images = part.split('|')
                        for img in sub_images:
                            img = img.strip()
                            if img:
                                images.append(img)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —á–µ—Ä—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        if part:
                            images.append(part)
            elif isinstance(images_str, list):
                # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–ø–∏—Å–æ–∫
                images = images_str
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–∞–π—Ç–∞
        item = {
            'images': images,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –º–∞—Å—Å–∏–≤
            'title': product.get('title', ''),
            'price': product.get('price', ''),
            'desc': product.get('desc', ''),
            'meta': product.get('meta', ''),
            'link': product.get('link', 'https://t.me/stub123'),
            'status': product.get('status', 'stock'),
            'order': int(product.get('order', 0)),
            'section': product.get('section', 'home')
        }
        
        website_items.append(item)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
    website_items.sort(key=lambda x: x['order'])
    
    return website_items

def update_website_files(products):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–∞–π—Ç–∞"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        website_items = convert_to_website_format(products)
        
        print(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(website_items)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∞–π—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º JavaScript –∫–æ–¥ —Å –¥–∞–Ω–Ω—ã–º–∏
        js_code = f"""const DEFAULT_TG = 'https://t.me/stub123';
/* ===== DATA (–≥–ª–∞–≤–Ω–∞—è) ===== */
const items = {json.dumps(website_items, ensure_ascii=False, indent=2)};
"""
        
        # –ß–∏—Ç–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞ app.min.js
        if os.path.exists('web/app.min.js'):
            with open('web/app.min.js', 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω–µ—Ü
            start_marker = "/* ===== DATA (–≥–ª–∞–≤–Ω–∞—è) ===== */"
            end_marker = "/* ===== DATA (–∫–æ–Ω–µ—Ü) ===== */"
            
            if start_marker in content:
                start_pos = content.find(start_marker)
                if end_marker in content:
                    end_pos = content.find(end_marker) + len(end_marker)
                    # –ó–∞–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
                    new_content = content[:start_pos] + js_code + content[end_pos:]
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ –∫–æ–Ω—Ü–∞, –∏—â–µ–º –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ items
                    items_start = content.find("const items = [")
                    if items_start != -1:
                        # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞
                        brace_count = 0
                        end_pos = items_start
                        for i, char in enumerate(content[items_start:], items_start):
                            if char == '[':
                                brace_count += 1
                            elif char == ']':
                                brace_count -= 1
                                if brace_count == 0:
                                    end_pos = i + 1
                                    break
                        
                        # –ò—â–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –ø–æ—Å–ª–µ –º–∞—Å—Å–∏–≤–∞
                        semicolon_pos = content.find(';', end_pos)
                        if semicolon_pos != -1:
                            end_pos = semicolon_pos + 1
                        
                        new_content = content[:items_start] + js_code + content[end_pos:]
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ app.min.js")
                        return False
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ app.min.js")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_name = f"web/app.min.js.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            shutil.copy2('web/app.min.js', backup_name)
            print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open('web/app.min.js', 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print("‚úÖ –§–∞–π–ª app.min.js –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
            
        else:
            print("‚ùå –§–∞–π–ª web/app.min.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–∞–π—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–∞–π—Ç–µ")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    products = load_products_from_sheets()
    
    if not products:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    print("\nüìã –ü–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:")
    for product in sorted(products, key=lambda x: int(x.get('order', 0))):
        print(f"  {product.get('order', 'N/A')}. {product.get('title', 'N/A')} (ID: {product.get('id', 'N/A')})")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–∞–π—Ç–∞
    if update_website_files(products):
        print("\n‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        print("üîÑ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–∞–π—Ç–µ")

if __name__ == "__main__":
    main()
