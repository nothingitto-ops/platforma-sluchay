#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
from datetime import datetime

def update_js_from_json():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç app.min.js –∏–∑ products.json"""
    
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ app.min.js –∏–∑ products.json...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ products.json
    try:
        with open('products.json', 'r', encoding='utf-8') as f:
            products = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ products.json")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ products.json: {e}")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π app.min.js
    try:
        with open('app.min.js', 'r', encoding='utf-8') as f:
            js_content = f.read()
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω app.min.js")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ app.min.js: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ items
    items_array = []
    for product in products:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤
        images = product.get('images', '').split(',') if isinstance(product.get('images'), str) else product.get('images', [])
        images = [img.strip() for img in images if img.strip()]
        
        item = {
            "images": images,
            "title": product.get('title', ''),
            "price": product.get('price', ''),
            "desc": product.get('desc', ''),
            "meta": product.get('meta', ''),
            "link": product.get('link', 'https://t.me/stub123'),
            "status": product.get('status', 'stock'),
            "order": int(product.get('order', 999)),
            "section": product.get('section', 'home')
        }
        items_array.append(item)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ order
    items_array.sort(key=lambda x: x['order'])
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π JavaScript –∫–æ–¥
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # –°–æ–∑–¥–∞–µ–º JSON —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–∫–æ–±–∫–∏
    json_str = json.dumps(items_array, ensure_ascii=False, indent=2)
    # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫–∏ (–æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫–∏)
    json_lines = json_str.split('\n')
    json_content = '\n'.join(json_lines[1:-1])  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫–∏
    
    new_items_js = f"""// –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ products.json: {timestamp}
const DEFAULT_TG = 'https://t.me/stub123';
/* ===== DATA (–≥–ª–∞–≤–Ω–∞—è) ===== */
const items = [
{json_content}
];"""
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Å—Å–∏–≤ items
    import re
    pattern = r'// –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ products\.json:.*?\nconst DEFAULT_TG =.*?\n/\* ===== DATA \(–≥–ª–∞–≤–Ω–∞—è\) ===== \*/\nconst items = \[\n.*?\n\];'
    
    if re.search(pattern, js_content, re.DOTALL):
        new_js_content = re.sub(pattern, new_items_js, js_content, flags=re.DOTALL)
        print("‚úÖ –ù–∞–π–¥–µ–Ω –∏ –∑–∞–º–µ–Ω–µ–Ω –º–∞—Å—Å–∏–≤ items")
    else:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –º–∞—Å—Å–∏–≤ items, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ")
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        new_js_content = new_items_js + "\n\n" + js_content
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        with open('app.min.js', 'w', encoding='utf-8') as f:
            f.write(new_js_content)
        print("‚úÖ app.min.js –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_name = f"app.min.js.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        with open(backup_name, 'w', encoding='utf-8') as f:
            f.write(js_content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    success = update_js_from_json()
    if success:
        print("\nüéâ JavaScript —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        print("üîÑ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print("\n‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
