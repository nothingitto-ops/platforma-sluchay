#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Platforma Manager Final - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Material Design 3

–ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–ù–û–ü–û–ö:
=====================
–í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—Ç–∏–ª–µ–π:

1. primary_button() - –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (—Å–∏–Ω—è—è)
2. secondary_button() - –í—Ç–æ—Ä–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–±–∏—Ä—é–∑–æ–≤–∞—è) 
3. success_button() - –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—Ö–∞ (–∑–µ–ª–µ–Ω–∞—è)
4. warning_button() - –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–æ—Ä–∞–Ω–∂–µ–≤–∞—è)
5. error_button() - –ö–Ω–æ–ø–∫–∞ –æ—à–∏–±–∫–∏ (–∫—Ä–∞—Å–Ω–∞—è)
6. outlined_button() - –ö–æ–Ω—Ç—É—Ä–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å —Ä–∞–º–∫–æ–π)
7. light_button() - –°–≤–µ—Ç–ª–∞—è –∫–Ω–æ–ø–∫–∞ (–¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫)
8. compact_button() - –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (120x40px)

–í—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å:
- –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã (radius=20)
- –ò–∫–æ–Ω–∫–∞ + —Ç–µ–∫—Å—Ç
- –ï–¥–∏–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –æ—Ç—Å—Ç—É–ø—ã
- Material Design 3 —Ü–≤–µ—Ç–∞
"""

import flet as ft
import json
import os
import shutil
from PIL import Image
import zipfile
from datetime import datetime
import requests
import re
import uuid
import gspread
from google.oauth2.credentials import Credentials
import sys
import locale
import asyncio
import base64
from typing import List, Dict, Optional
from flet import (
    ElevatedButton, OutlinedButton, Row, Icon, Text,
    ButtonStyle, RoundedRectangleBorder,
    padding, border, TextOverflow
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
if sys.platform.startswith('win'):
    try:
        locale.setlocale(locale.LC_ALL, 'Russian_Russia.1251')
    except:
        try:
            locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
        except:
            pass
else:
    try:
        locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
    except:
        try:
            locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
        except:
            pass

class PlatformaManagerFinal:
    def __init__(self):
        self.products = []
        self.selected_product = None
        self.current_section = "home"
        self.current_view = "products"  # products, add, preview, deploy
        self.page = None
        
        # –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.selected_product_text = ft.Ref[ft.Text]()
        self.edit_button = ft.Ref[ElevatedButton]()
        self.delete_button = ft.Ref[ElevatedButton]()
        self.preview_grid_ref = ft.Ref[ft.GridView]()
        
        # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–º –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
        self.selected_preview_product = None
        self.preview_products = []  # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.preview_section = "home"  # –¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
        
        # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.selected_files = []
        
        # –°–ø–æ–∫–æ–π–Ω—ã–µ —Ü–≤–µ—Ç–∞ Material Design 3
        self.colors = {
            'primary': '#5C6BC0',  # –°–ø–æ–∫–æ–π–Ω—ã–π –∏–Ω–¥–∏–≥–æ
            'primary_light': '#8E99F3',
            'primary_container': '#E8EAF6',  # –°–≤–µ—Ç–ª—ã–π –∏–Ω–¥–∏–≥–æ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            'secondary': '#26A69A',  # –°–ø–æ–∫–æ–π–Ω—ã–π –±–∏—Ä—é–∑–æ–≤—ã–π
            'tertiary': '#FF8A65',  # –°–ø–æ–∫–æ–π–Ω—ã–π –∫–æ—Ä–∞–ª–ª–æ–≤—ã–π
            'surface': '#FFFFFF',
            'background': '#FAFAFA',
            'error': '#EF5350',  # –°–ø–æ–∫–æ–π–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
            'success': '#66BB6A',  # –°–ø–æ–∫–æ–π–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
            'warning': '#FFA726',  # –°–ø–æ–∫–æ–π–Ω—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            'on_surface': '#212121',
            'on_surface_variant': '#757575',
            'outline': '#BDBDBD',
            'surface_container': '#F5F5F5',
        }
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å–∞–π–¥–±–∞—Ä–∞)
        self.SIDE_W = 280
        self.BTN_W = self.SIDE_W - 32  # —à–∏—Ä–∏–Ω–∞ —Å–∞–π–¥–±–∞—Ä–∞ –º–∏–Ω—É—Å –ø–∞–¥–¥–∏–Ω–≥–∏
        self.BTN_H, self.RADIUS, self.GAP = 42, 20, 10

    def pill_button(self, text, icon, bg=None, fg=None, on_click=None, outlined=False, width=None, height=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏-–ø–∏–ª—é–ª–∏ —Å –µ–¥–∏–Ω—ã–º —Å—Ç–∏–ª–µ–º"""
        if bg is None:
            bg = self.colors['primary']
        if fg is None:
            fg = self.colors['surface']
        if width is None:
            width = self.BTN_W
        if height is None:
            height = self.BTN_H
            
        style = ButtonStyle(
            bgcolor=None if outlined else bg,
            color=fg if not outlined else self.colors['on_surface'],
            side=border.all(1, self.colors['outline']) if outlined else None,
            shape=RoundedRectangleBorder(radius=self.RADIUS),
            padding=padding.symmetric(horizontal=16, vertical=12),
        )
        
        btn_cls = OutlinedButton if outlined else ElevatedButton
        return btn_cls(
            width=width, height=height,
            content=Row(
                [Icon(icon, size=18), Text(text, size=14, no_wrap=True, max_lines=1, overflow=TextOverflow.ELLIPSIS)],
                spacing=8, alignment="start"
            ),
            style=style,
            on_click=on_click,
        )

    def primary_button(self, text, icon, on_click=None):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - —Å–∏–Ω—è—è"""
        return self.pill_button(text, icon, bg=self.colors['primary'], fg=self.colors['surface'], on_click=on_click)
    
    def secondary_button(self, text, icon, on_click=None):
        """–í—Ç–æ—Ä–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –±–∏—Ä—é–∑–æ–≤–∞—è"""
        return self.pill_button(text, icon, bg=self.colors['secondary'], fg=self.colors['surface'], on_click=on_click)
    
    def success_button(self, text, icon, on_click=None):
        """–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—Ö–∞ - –∑–µ–ª–µ–Ω–∞—è"""
        return self.pill_button(text, icon, bg=self.colors['success'], fg=self.colors['surface'], on_click=on_click)
    
    def warning_button(self, text, icon, on_click=None):
        """–ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - –æ—Ä–∞–Ω–∂–µ–≤–∞—è"""
        return self.pill_button(text, icon, bg=self.colors['warning'], fg=self.colors['surface'], on_click=on_click)
    
    def error_button(self, text, icon, on_click=None):
        """–ö–Ω–æ–ø–∫–∞ –æ—à–∏–±–∫–∏ - –∫—Ä–∞—Å–Ω–∞—è"""
        return self.pill_button(text, icon, bg=self.colors['error'], fg=self.colors['surface'], on_click=on_click)
    
    def outlined_button(self, text, icon, on_click=None):
        """–ö–æ–Ω—Ç—É—Ä–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å —Ä–∞–º–∫–æ–π"""
        return self.pill_button(text, icon, on_click=on_click, outlined=True)
    
    def light_button(self, text, icon, on_click=None):
        """–°–≤–µ—Ç–ª–∞—è –∫–Ω–æ–ø–∫–∞ - –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫"""
        return self.pill_button(text, icon, bg=self.colors['primary_container'], fg=self.colors['on_surface'], on_click=on_click)
    
    def compact_button(self, text, icon, on_click=None, color_type="primary", outlined=False):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –º–µ–Ω—å—à–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
        bg_map = {
            "primary": self.colors["primary"],
            "success": self.colors["success"],
            "error": self.colors["error"],
            "secondary": self.colors["secondary"],
        }
        bg = None if outlined else bg_map.get(color_type, self.colors["primary"])
        fg = self.colors["surface"] if not outlined else self.colors["on_surface"]
        side = ft.border.all(1, self.colors["outline"]) if outlined else None
        Btn = ft.OutlinedButton if outlined else ft.ElevatedButton

        return Btn(
            height=44,
            content=ft.Row(
                [
                    ft.Icon(icon, size=18),
                    ft.Text(text, size=14, no_wrap=True, max_lines=1, overflow=ft.TextOverflow.ELLIPSIS),
                ],
                spacing=8,
                vertical_alignment=ft.CrossAxisAlignment.CENTER,  # <-- —Ç–µ–∫—Å—Ç –Ω–µ ¬´–ø–ª–∞–≤–∞–µ—Ç¬ª
            ),
            style=ft.ButtonStyle(
                bgcolor=bg,
                color=fg,
                side=side,
                shape=ft.StadiumBorder(),
                padding=ft.padding.symmetric(horizontal=16, vertical=10),
            ),
            on_click=on_click,
        )

    async def main(self, page: ft.Page):
        self.page = page
        page.title = "üõçÔ∏è Platforma Manager"
        page.theme_mode = ft.ThemeMode.LIGHT
        page.window_width = 1800
        page.window_height = 1200
        page.window_min_width = 1600
        page.window_min_height = 900
        page.window_resizable = True
        page.window_maximized = True  # –ê–≤—Ç–æ-—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        page.padding = 0
        page.spacing = 0
        
        # –î–∞–µ–º Flet –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º
        page.assets_dir = os.path.abspath(".")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã Material Design 3
        page.theme = ft.Theme(
            color_scheme_seed=ft.Colors.INDIGO,
            use_material3=True,
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await self.load_products_from_json()
        
        # –î–æ–±–∞–≤–ª—è–µ–º FilePicker
        self.file_picker = ft.FilePicker(on_result=self.on_files_selected)
        page.overlay.append(self.file_picker)
        page.update()  # –í–ê–ñ–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ overlay
        print(f"FilePicker initialized and added to overlay")
        print(f"Platform: {sys.platform}")
        print(f"Flet version: {getattr(ft, '__version__', 'unknown')}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await self.setup_ui()

    async def load_products_from_json(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists("products.json"):
                with open("products.json", "r", encoding="utf-8") as f:
                    self.products = json.load(f)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON")
            else:
                self.products = []
                print("‚ö†Ô∏è –§–∞–π–ª products.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            self.products = []
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
        await self.auto_sync_with_sheets()

    async def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–∏ hot-reload
        if getattr(self.page, "is_built", False):
            self.page.clean()  # –Ω–∞ –≤—Å—è–∫–∏–π ‚Äî –≤—ã—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
        self.page.is_built = True
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ft.Container(
            content=ft.Row([
                # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                self.create_sidebar_container(),
                
                # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                ft.VerticalDivider(width=1),
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                ft.Container(
                    content=self.create_main_content(),
                    expand=True,
                    padding=16,
                    bgcolor=self.colors['surface'],
                    border_radius=12,
                    clip_behavior=ft.ClipBehavior.NONE,  # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                ),
            ]),
            expand=True,
        )
        
        self.page.add(main_container)
        self.page.update()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        await self.refresh_products_table()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
        self.setup_adaptive_scroll()

    def setup_adaptive_scroll(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞"""
        MIN_H = 760
        
        def on_resize(e):
            if hasattr(self, 'side_col'):
                self.side_col.scroll = "auto" if self.page.height < MIN_H else "off"
                # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ on_resize, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
                self.page.update()
        
        self.page.on_resize = on_resize
        on_resize(None)  # –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ

    async def on_preview_click(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ü—Ä–æ—Å–º–æ—Ç—Ä - –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏"""
        if self.current_view == "preview":
            # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º
            await self.show_products_view()
        else:
            # –ï—Å–ª–∏ –º—ã –≤ —Ç–æ–≤–∞—Ä–∞—Ö, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
            await self.show_preview_view()

    def create_sidebar_container(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º
        self.side_col = ft.Column(
            spacing=8,
            tight=True,
            scroll="off",  # –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—ã—Ç–∞–µ–º—Å—è –±–µ–∑ —Å–∫—Ä–æ–ª–ª–∞
        )

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–∞–π–¥–±–∞—Ä–∞
        side = ft.Container(
            width=self.SIDE_W,
            padding=16,
            bgcolor=self.colors['surface_container'],
            content=self.side_col,
            border_radius=0
        )
        
        # –ù–∞–ø–æ–ª–Ω—è–µ–º –±–æ–∫–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –û–î–ò–ù –†–ê–ó (–±–µ–∑ append –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö)
        self.rebuild_sidebar()
        
        return side

    def rebuild_sidebar(self):
        """–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Å–∞–π–¥–±–∞—Ä–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if not hasattr(self, 'side_col'):
            return
            
        self.side_col.controls.clear()
        self.side_col.controls.extend([
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞)
            ft.Container(
                bgcolor=self.colors['surface'],
                border_radius=8,
                padding=12,
                content=ft.Column(
                    spacing=8,
                    tight=True,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    controls=[
                        ft.Container(
                            ft.Icon(ft.Icons.INVENTORY_2_OUTLINED, size=24),
                            bgcolor=ft.Colors.BLUE_50,
                            width=48, height=48, border_radius=24
                        ),
                        ft.Text("–¢–æ–≤–∞—Ä—ã", size=13, weight=ft.FontWeight.W_600),
                        self.light_button("–ü—Ä–æ—Å–º–æ—Ç—Ä" if self.current_view != "preview" else "–¢–æ–≤–∞—Ä—ã", ft.Icons.REMOVE_RED_EYE_OUTLINED, on_click=lambda e: self.page.run_task(self.on_preview_click(e))),
                    ],
                )
            ),
            
            # –ö–Ω–æ–ø–∫–∏ Sheets –∏ –¥–µ–π—Å—Ç–≤–∏–π
            ft.Column(
                spacing=6,
                tight=True,
                controls=[
                                self.secondary_button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å Sheets", ft.Icons.CLOUD_DOWNLOAD, on_click=lambda e: self.page.run_task(self.load_from_sheets(e))),
            self.primary_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Sheets", ft.Icons.CLOUD_UPLOAD, on_click=lambda e: self.page.run_task(self.sync_products(e))),
            self.primary_button("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", ft.Icons.SYNC, on_click=lambda e: self.page.run_task(self.sync_products(e))),
            self.success_button("–î–µ–ø–ª–æ–π", ft.Icons.ROCKET_LAUNCH, on_click=lambda e: self.page.run_task(self.deploy_site(e))),
            self.success_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", ft.Icons.ADD, on_click=lambda e: self.page.run_task(self.show_add_view_async(e))),
                ]
            ),
            

            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            ft.Column(
                spacing=6,
                tight=True,
                controls=[
                    ft.Container(
                        content=self.outlined_button("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", ft.Icons.EDIT_OUTLINED, on_click=lambda e: self.page.run_task(self.edit_selected_product(e))),
                        ref=self.edit_button,
                    ),
                    ft.Container(
                        content=self.error_button("–£–¥–∞–ª–∏—Ç—å", ft.Icons.DELETE, on_click=lambda e: self.page.run_task(self.delete_selected_product(e))),
                        ref=self.delete_button,
                    ),
                ]
            ),
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            ft.Column(
                spacing=2,
                tight=True,
                controls=[
                    ft.Text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", size=12, weight=ft.FontWeight.W_600, color=self.colors['on_surface_variant']),
                    ft.Text(f"–¢–æ–≤–∞—Ä–æ–≤: {len(self.products)}", size=11, color=self.colors['on_surface_variant'])
                ]
            )
        ])
        
        if hasattr(self, 'page'):
            self.page.update()

    def create_main_content(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.content_area = ft.Container(
            content=self.create_products_view(),
            expand=True,
        )
        return self.content_area

    def create_products_view(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê) - –¢–ê–ë–õ–ò–¶–ê"""
        return ft.Column([
            # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
            ft.Container(
                content=ft.Row([
                    ft.Text(
                        "–¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤",
                        size=28,
                        weight=ft.FontWeight.BOLD,
                        color=self.colors['on_surface'],
                    ),
                    ft.Container(expand=True),
                    ft.Container(
                        content=ft.SegmentedButton(
                            selected={"home"},
                            segments=[
                                ft.Segment(value="home", label=ft.Text("üè† HOME")),
                                ft.Segment(value="nessffo", label=ft.Text("üé® NESSFFO")),
                            ],
                            on_change=self.on_section_change,
                        ),
                        padding=ft.padding.only(right=16),  # –ø—Ä–∞–≤—ã–π –ø–∞–¥–¥–∏–Ω–≥ —á—Ç–æ–±—ã —á–∏–ø—ã –Ω–µ –æ–±—Ä–µ–∑–∞–ª–∏—Å—å
                    ),
                ]),
                padding=ft.padding.only(bottom=20),
            ),
            
            # –¢–ê–ë–õ–ò–¶–ê –¢–û–í–ê–†–û–í
            ft.Container(
                content=self.create_products_table(),
                expand=True,
            ),
            

        ])

    def create_products_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤"""
        self.products_table = ft.Column([
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            ft.Container(
                content=                ft.Row([
                    ft.Container(
                        content=ft.Text("–ü–æ—Ä—è–¥–æ–∫", weight=ft.FontWeight.BOLD, size=14, color="white"),
                        width=80,
                    ),
                    ft.Container(
                        content=ft.Text("ID", weight=ft.FontWeight.BOLD, size=14, color="white"),
                        width=60,
                    ),
                    ft.Container(
                        content=ft.Text("–ù–∞–∑–≤–∞–Ω–∏–µ", weight=ft.FontWeight.BOLD, size=14, color="white"),
                        expand=True,
                    ),
                    ft.Container(
                        content=ft.Text("–¶–µ–Ω–∞", weight=ft.FontWeight.BOLD, size=14, color="white"),
                        width=100,
                    ),
                ]),
                padding=ft.padding.all(8),
                bgcolor=self.colors['primary'],
                border_radius=ft.border_radius.only(top_left=8, top_right=8),
            ),
            
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–µ)
            ft.Container(
                content=ft.ListView(
                    spacing=0,
                    expand=True,
                    height=200,
                ),
                expand=True,
                bgcolor=self.colors['surface'],
                border=ft.border.all(1, self.colors['outline']),
                border_radius=ft.border_radius.only(bottom_left=8, bottom_right=8),
            ),
        ])
        return self.products_table

    def create_product_table_row(self, product: Dict, index: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞"""
        return ft.Container(
            content=ft.Row([
                # –ü–æ—Ä—è–¥–æ–∫
                ft.Container(
                    content=ft.Text(
                        str(product.get('order', 'N/A')), 
                        size=12,
                        color="black",
                    ),
                    width=80,
                    padding=ft.padding.all(6),
                ),
                
                # ID
                ft.Container(
                    content=ft.Text(
                        str(product.get('id', index + 1)), 
                        size=12,
                        color="black",
                    ),
                    width=60,
                    padding=ft.padding.all(6),
                ),
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ
                ft.Container(
                    content=ft.Text(
                        str(product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')),
                        size=12,
                        color="black",
                    ),
                    expand=True,
                    padding=ft.padding.all(6),
                ),
                
                # –¶–µ–Ω–∞
                ft.Container(
                    content=ft.Text(
                        str(product.get('price', '0')),
                        size=12,
                        color="black",
                    ),
                    width=100,
                    padding=ft.padding.all(6),
                ),
                

            ]),
            border=ft.border.only(bottom=ft.border.BorderSide(1, "lightgray")),
            on_click=lambda e: self.select_product(product),
        )

    def product_first_image_src(self, p: dict) -> str | None:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è GridView.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ img/.
        """
        product_id = p.get("id", "")
        if not product_id:
            return None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ img/ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        img_path = f"img/product_{product_id}"
        if os.path.exists(img_path):
            for file in sorted(os.listdir(img_path)):
                if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')):
                    full_path = f"{img_path}/{file}"
                    print(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {full_path}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è Flet
                    return f"/{full_path}"
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ img/, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ web/img/ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π)
        web_img_path = f"web/img/product_{product_id}"
        if os.path.exists(web_img_path):
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            for file in sorted(os.listdir(web_img_path)):
                if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')):
                    full_path = f"{web_img_path}/{file}"
                    print(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {full_path}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è Flet
                    return f"/{full_path}"
        
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
        return None

    def get_product_image_base64(self, p: dict) -> str | None:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64 –¥–ª—è Flet.
        """
        product_id = p.get("id", "")
        if not product_id:
            return None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ img/ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        img_path = f"img/product_{product_id}"
        if os.path.exists(img_path):
            for file in sorted(os.listdir(img_path)):
                if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')):
                    full_path = f"{img_path}/{file}"
                    try:
                        with open(full_path, 'rb') as img_file:
                            img_data = img_file.read()
                            img_base64 = base64.b64encode(img_data).decode('utf-8')
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                            if file.lower().endswith('.png'):
                                mime_type = 'image/png'
                            elif file.lower().endswith('.jpg') or file.lower().endswith('.jpeg'):
                                mime_type = 'image/jpeg'
                            elif file.lower().endswith('.gif'):
                                mime_type = 'image/gif'
                            elif file.lower().endswith('.webp'):
                                mime_type = 'image/webp'
                            else:
                                mime_type = 'image/jpeg'
                            
                            return f"data:{mime_type};base64,{img_base64}"
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {full_path}: {e}")
                        continue
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ img/, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ web/img/ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π)
        web_img_path = f"web/img/product_{product_id}"
        if os.path.exists(web_img_path):
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            for file in sorted(os.listdir(web_img_path)):
                if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')):
                    full_path = f"{web_img_path}/{file}"
                    try:
                        with open(full_path, 'rb') as img_file:
                            img_data = img_file.read()
                            img_base64 = base64.b64encode(img_data).decode('utf-8')
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                            if file.lower().endswith('.png'):
                                mime_type = 'image/png'
                            elif file.lower().endswith('.jpg') or file.lower().endswith('.jpeg'):
                                mime_type = 'image/jpeg'
                            elif file.lower().endswith('.gif'):
                                mime_type = 'image/gif'
                            elif file.lower().endswith('.webp'):
                                mime_type = 'image/webp'
                            else:
                                mime_type = 'image/jpeg'
                            
                            return f"data:{mime_type};base64,{img_base64}"
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {full_path}: {e}")
                        continue
        
        return None

    def create_product_thumbnail(self, p: dict):
        """
        –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Ç–æ–≤–∞—Ä–∞: –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ –ø–∞–ø–∫–∏ product_{id},
        –ª–∏–±–æ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.
        """
        title = p.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        img = self.first_image_path_by_id(p)

        placeholder = ft.Container(
            alignment=ft.alignment.center,
            bgcolor=self.colors["surface_container"],
            border_radius=8,
            content=ft.Icon(ft.Icons.IMAGE_NOT_SUPPORTED_OUTLINED, size=42, color=self.colors["on_surface_variant"]),
            width=200, height=200,
        )

        if img and os.path.exists(img):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å - —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–æ!
            abs_path = os.path.abspath(img)
            return ft.Image(
                src=abs_path,
                fit=ft.ImageFit.COVER,
                width=200,
                height=200,
                border_radius=8,
                error_content=placeholder,
            )

        return placeholder

    def first_image_path_by_id(self, product: dict) -> str | None:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ü–ï–†–í–û–ô –∫–∞—Ä—Ç–∏–Ω–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –µ–≥–æ id.
        –ò—â–µ—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É:
          img/product_{id}/..., –∑–∞—Ç–µ–º web/img/product_{id}/...
        –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–µ–≤—å—é/—Å–µ—Ç–æ–∫.
        """
        pid = str(product.get("id", "")).strip()
        if not pid:
            return None

        # 0) –µ—Å–ª–∏ –≤ JSON –µ—Å—Ç—å images="product_2/product_2_1.jpg|...", –≤–æ–∑—å–º–µ–º –ø–µ—Ä–≤–æ–µ
        images_field = (product.get("images") or "").strip()
        if images_field:
            first = images_field.split("|")[0].strip()
            if first:
                candidate = first if first.startswith("img/") else f"img/{first}"
                if os.path.exists(candidate):
                    return candidate

        exts = (".png", ".jpg", ".jpeg", ".webp", ".gif")
        folders = [f"img/product_{pid}", f"web/img/product_{pid}"]

        for folder in folders:
            if os.path.isdir(folder):
                # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –∏–º–µ–Ω–∞
                candidates = [
                    f"{folder}/cover.jpg",
                    f"{folder}/{pid}_1.jpg",
                    f"{folder}/product_{pid}_1.jpg",
                    f"{folder}/1.jpg",
                ]
                for c in candidates:
                    if os.path.exists(c):
                        return c
                # –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è —Ñ–∞–π–ª –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                for name in sorted(os.listdir(folder)):
                    if name.lower().endswith(exts):
                        return f"{folder}/{name}"
        return None

    def get_product_image_path(self, product: Dict) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞"""
        try:
            product_id = product.get('id', '')
            if not product_id:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            possible_paths = [
                f"img/product_{product_id}",
                f"web/img/product_{product_id}",
            ]
            
            for image_dir in possible_paths:
                if os.path.exists(image_dir):
                    # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    for file in sorted(os.listdir(image_dir)):
                        if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')):
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–µ–±-–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            relative_path = f"{image_dir}/{file}"
                            print(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {relative_path}")
                            return relative_path
            
            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.get('id')}: {e}")
            return None

    def create_preview_card(self, product: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = self.get_product_image_path(product)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
            is_selected = (self.selected_preview_product and 
                          self.selected_preview_product.get('id') == product.get('id'))
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É
            if image_path and os.path.exists(image_path):
                try:
                    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
                    image_widget = ft.Image(
                        src=image_path,
                        width=150,
                        height=150,
                        fit=ft.ImageFit.COVER,
                        border_radius=8,
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
                    image_widget = ft.Container(
                        content=ft.Icon(
                            ft.Icons.IMAGE,
                            size=50,
                            color=self.colors['on_surface_variant'],
                        ),
                        width=150,
                        height=150,
                        alignment=ft.alignment.center,
                        bgcolor=self.colors['surface_container'],
                        border_radius=8,
                    )
            else:
                # –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                image_widget = ft.Container(
                    content=ft.Icon(
                        ft.Icons.IMAGE_NOT_SUPPORTED,
                        size=50,
                        color=self.colors['on_surface_variant'],
                    ),
                    width=150,
                    height=150,
                    alignment=ft.alignment.center,
                    bgcolor=self.colors['surface_container'],
                    border_radius=8,
                )
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            card = ft.Container(
                content=ft.Column([
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    image_widget,
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
                    ft.Container(
                        content=ft.Column([
                            ft.Text(
                                str(product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')),
                                size=14,
                                weight=ft.FontWeight.W_500,
                                color=self.colors['on_surface'],
                                text_align=ft.TextAlign.CENTER,
                                max_lines=2,
                                overflow=ft.TextOverflow.ELLIPSIS,
                            ),
                            ft.Text(
                                f"ID: {product.get('id', 'N/A')} | –ü–æ—Ä—è–¥–æ–∫: {product.get('order', 'N/A')}",
                                size=11,
                                color=self.colors['on_surface_variant'],
                                text_align=ft.TextAlign.CENTER,
                            ),
                            ft.Text(
                                f"–¶–µ–Ω–∞: {product.get('price', '0')} ‚ÇΩ",
                                size=12,
                                weight=ft.FontWeight.W_600,
                                color=self.colors['primary'],
                                text_align=ft.TextAlign.CENTER,
                            ),
                        ], spacing=4),
                        padding=ft.padding.all(8),
                    ),
                ], spacing=8),
                padding=ft.padding.all(8),
                bgcolor=self.colors['primary_container'] if is_selected else self.colors['surface'],
                border_radius=12,
                border=ft.border.all(3 if is_selected else 1, self.colors['primary'] if is_selected else self.colors['outline']),
                on_click=lambda e: self.select_preview_product_sync(product),
            )
            
            return card
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            return ft.Container(
                content=ft.Text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"),
                padding=10,
                bgcolor=self.colors['error_container'],
                border_radius=8,
            )

    def create_add_view(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.add_title_field = ft.Ref[ft.TextField]()
        self.add_price_field = ft.Ref[ft.TextField]()
        self.add_desc_field = ft.Ref[ft.TextField]()
        self.add_meta_field = ft.Ref[ft.TextField]()
        self.add_section_group = ft.Ref[ft.RadioGroup]()
        self.add_files_text = ft.Ref[ft.Text]()
        
        return ft.Container(
            content=ft.Column([
                ft.Text(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
                    size=28,
                    weight=ft.FontWeight.BOLD,
                    color=self.colors['on_surface'],
                ),
                ft.Text(
                    "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞.",
                    size=16,
                    color=self.colors['on_surface_variant'],
                ),
                
                # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                ft.Container(
                    content=ft.Column([
                        # –ù–∞–∑–≤–∞–Ω–∏–µ
                        ft.TextField(
                            ref=self.add_title_field,
                            label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *",
                            hint_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                            width=700,
                            border_color=self.colors['outline'],
                            focused_border_color=self.colors['primary'],
                        ),
                        
                        # –¶–µ–Ω–∞
                        ft.TextField(
                            ref=self.add_price_field,
                            label="–¶–µ–Ω–∞",
                            hint_text="7500",
                            width=300,
                            border_color=self.colors['outline'],
                            focused_border_color=self.colors['primary'],
                        ),
                        
                        # –û–ø–∏—Å–∞–Ω–∏–µ
                        ft.TextField(
                            ref=self.add_desc_field,
                            label="–û–ø–∏—Å–∞–Ω–∏–µ",
                            hint_text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                            multiline=True,
                            min_lines=3,
                            max_lines=5,
                            width=700,
                            border_color=self.colors['outline'],
                            focused_border_color=self.colors['primary'],
                        ),
                        
                        # –°–æ—Å—Ç–∞–≤
                        ft.TextField(
                            ref=self.add_meta_field,
                            label="–°–æ—Å—Ç–∞–≤",
                            hint_text="–ù–∞–ø—Ä–∏–º–µ—Ä: 100% —Ö–ª–æ–ø–æ–∫, —Ü–≤–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä",
                            width=700,
                            border_color=self.colors['outline'],
                            focused_border_color=self.colors['primary'],
                        ),
                        
                        # –†–∞–∑–¥–µ–ª
                        ft.Row([
                            ft.Text("–†–∞–∑–¥–µ–ª:", size=16, weight=ft.FontWeight.W_600),
                            ft.RadioGroup(
                                ref=self.add_section_group,
                                content=ft.Column([
                                    ft.Radio(value="home", label="üè† HOME"),
                                    ft.Radio(value="nessffo", label="üé® NESSFFO"),
                                ]),
                                value="home"
                            ),
                        ]),
                        
                        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        ft.Text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", size=16, weight=ft.FontWeight.W_600),
                        ft.ElevatedButton(
                            "üìÅ –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                            icon=ft.Icons.FOLDER_OPEN,
                            on_click=self.open_images_dialog,
                        ),
                        ft.Text(
                            ref=self.add_files_text,
                            size=12,
                            color=self.colors['on_surface_variant'],
                            value="–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
                        ),
                        
                        ft.Container(height=20),
                        
                        # –ö–Ω–æ–ø–∫–∏
                        ft.Row([
                            self.compact_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", ft.Icons.ADD, on_click=lambda e: self.page.run_task(self.add_product_from_form(e)), color_type="success"),
                            self.compact_button("–û—Ç–º–µ–Ω–∞", ft.Icons.CANCEL, on_click=self.cancel_add_product, color_type="primary"),
                        ], spacing=10),
                    ], spacing=20, tight=True),
                    padding=ft.padding.all(20),
                    bgcolor=self.colors['surface_container'],
                    border_radius=8,
                ),
            ], spacing=20, scroll=ft.ScrollMode.AUTO),
            padding=ft.padding.all(20),
            expand=True,
        )

    def create_preview_view(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –ü–õ–ò–¢–ö–ê –î–õ–Ø –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–Ø"""
        return ft.Container(
            content=ft.Column([
                ft.Text(
                    "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤",
                    size=28,
                    weight=ft.FontWeight.BOLD,
                    color=self.colors['on_surface'],
                ),
                ft.Text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ",
                    size=16,
                    color=self.colors['on_surface_variant'],
                ),
                

                
                # –§–∏–ª—å—Ç—Ä—ã
                ft.Row([
                    ft.Text("–†–∞–∑–¥–µ–ª:", size=16),
                    ft.Container(
                        content=ft.SegmentedButton(
                            selected={"home"},
                            segments=[
                                ft.Segment(value="home", label=ft.Text("üè† HOME")),
                                ft.Segment(value="nessffo", label=ft.Text("üé® NESSFFO")),
                            ],
                            on_change=self.on_preview_section_change,
                        ),
                        padding=ft.padding.only(right=16),  # –ø—Ä–∞–≤—ã–π –ø–∞–¥–¥–∏–Ω–≥ —á—Ç–æ–±—ã —á–∏–ø—ã –Ω–µ –æ–±—Ä–µ–∑–∞–ª–∏—Å—å
                    ),
                ]),
                
                # –ü–ª–∏—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
                ft.Container(
                    content=ft.GridView(
                        expand=True,
                        runs_count=4,
                        max_extent=220,
                        child_aspect_ratio=1.0,
                        spacing=15,
                        run_spacing=15,
                        ref=self.preview_grid_ref,
                    ),
                    expand=True,
                    padding=ft.padding.all(20),
                    bgcolor=self.colors['surface_container'],
                    border_radius=8,
                ),
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–º
                ft.Container(
                    content=ft.Row([
                        self.compact_button("‚¨ÜÔ∏è –ü–æ–¥–Ω—è—Ç—å –≤—ã—à–µ", ft.Icons.KEYBOARD_ARROW_UP, on_click=lambda e: self.page.run_task(self.move_product_up(e)), color_type="primary"),
                        self.compact_button("‚¨áÔ∏è –û–ø—É—Å—Ç–∏—Ç—å –Ω–∏–∂–µ", ft.Icons.KEYBOARD_ARROW_DOWN, on_click=lambda e: self.page.run_task(self.move_product_down(e)), color_type="primary"),
                        self.compact_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", ft.Icons.SAVE, on_click=lambda e: self.page.run_task(self.save_product_order(e)), color_type="success"),
                    ], spacing=8),
                    padding=ft.padding.all(8),
                    bgcolor=self.colors['surface_container'],
                    border_radius=8,
                ),
            ]),
            padding=ft.padding.all(20),
        )

    def create_deploy_view(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        return ft.Container(
            content=ft.Column([
                ft.Text(
                    "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞",
                    size=28,
                    weight=ft.FontWeight.BOLD,
                    color=self.colors['on_surface'],
                ),
                ft.Text(
                    "–≠–∫—Å–ø–æ—Ä—Ç –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞",
                    size=16,
                    color=self.colors['on_surface_variant'],
                ),
                
                # –û–ø—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
                ft.Container(
                    content=ft.Column([
                        ft.Checkbox(label="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets", value=True),
                        ft.Checkbox(label="–°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è", value=True),
                        ft.Checkbox(label="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", value=True),
                        
                        ft.Container(height=20),
                        
                        ft.Row([
                                                    self.compact_button("üöÄ Deploy", ft.Icons.ROCKET_LAUNCH, on_click=lambda e: self.page.run_task(self.deploy_site(e)), color_type="secondary"),
                        self.compact_button("üì¶ –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤", ft.Icons.ARCHIVE, on_click=lambda e: self.page.run_task(self.create_archive(e)), color_type="primary"),
                        ]),
                    ], spacing=15),
                    padding=ft.padding.all(20),
                    bgcolor=self.colors['surface_container'],
                    border_radius=8,
                ),
            ]),
            padding=ft.padding.all(20),
        )

    async def on_navigation_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        index = e.control.selected_index
        if index == 0:  # –¢–æ–≤–∞—Ä—ã
            await self.show_products_view()
        elif index == 1:  # –ü—Ä–æ—Å–º–æ—Ç—Ä
            await self.show_preview_view()
        elif index == 2:  # Deploy
            await self.show_deploy_view()
        elif index == 3:  # –î–æ–±–∞–≤–∏—Ç—å
            await self.show_add_view()

    async def on_section_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
        if isinstance(e.control.selected, set) and len(e.control.selected) > 0:
            self.current_section = list(e.control.selected)[0]
        else:
            self.current_section = e.control.selected
        print(f"–°–º–µ–Ω–∞ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞: {self.current_section}")
        await self.refresh_products_table()

    async def on_preview_section_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        if isinstance(e.control.selected, set) and e.control.selected:
            self.preview_section = list(e.control.selected)[0]
        else:
            self.preview_section = e.control.selected or "home"
        print(f"–°–º–µ–Ω–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –Ω–∞: {self.preview_section}")
        await self.refresh_preview_grid()

    async def show_products_view(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (–ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê)"""
        self.current_view = "products"
        self.content_area.content = self.create_products_view()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–π–¥–±–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        self.rebuild_sidebar()
        self.page.update()
        await self.refresh_products_table()

    async def show_add_view(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        self.current_view = "add"
        self.content_area.content = self.create_add_view()
        self.page.update()

    async def show_preview_view(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        self.current_view = "preview"
        self.content_area.content = self.create_preview_view()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–π–¥–±–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        self.rebuild_sidebar()
        self.page.update()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        await self.refresh_preview_grid()

    async def show_add_view_async(self, e=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            print("üîß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞...")
            self.current_view = "add"
            print("‚úÖ current_view —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 'add'")
            
            self.content_area.content = self.create_add_view()
            print("‚úÖ create_add_view() –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            # –ê–≤—Ç–æ-—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
            self.page.window_maximized = True
            print("‚úÖ –û–∫–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ")
            
            self.rebuild_sidebar()
            print("‚úÖ rebuild_sidebar() –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            await asyncio.sleep(0)  # –¥–∞—ë–º UI ¬´–ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è¬ª
            self.page.update()
            print("‚úÖ page.update() –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            print("‚úÖ –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã: {e}")
            import traceback
            traceback.print_exc()

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é show_add_view

    async def show_products_view(self, e=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–∞–±–ª–∏—Ü–∞)"""
        self.current_view = "products"
        self.content_area.content = self.create_products_view()
        self.rebuild_sidebar()
        await self.refresh_products_table()

    async def cancel_add_product(self, e=None):
        """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.selected_files = []
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
        await self.show_products_view()

    def on_files_selected(self, e: ft.FilePickerResultEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
        print(f"DEBUG: on_files_selected –≤—ã–∑–≤–∞–Ω, files: {e.files}")
        if e.files:
            # –í –≤–µ–±-—Ä–µ–∂–∏–º–µ path –º–æ–∂–µ—Ç –±—ã—Ç—å None, –∏—Å–ø–æ–ª—å–∑—É–µ–º name
            self.selected_files = []
            file_names = []
            for f in e.files:
                if f.path:
                    self.selected_files.append(f.path)
                    file_names.append(os.path.basename(f.path))
                elif f.name:
                    # –í –≤–µ–±-—Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    file_names.append(f.name)
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
                    self.selected_files.append(f.name)
            
            if hasattr(self, 'add_files_text') and self.add_files_text.current:
                self.add_files_text.current.value = f"–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(file_names)}\n" + "\n".join(file_names[:3])
                if len(file_names) > 3:
                    self.add_files_text.current.value += f"\n... –∏ –µ—â–µ {len(file_names) - 3} —Ñ–∞–π–ª–æ–≤"
                self.page.update()
            print(f"DEBUG: –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.selected_files)}")
            print(f"DEBUG: –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤: {file_names}")
        else:
            self.selected_files = []
            if hasattr(self, 'add_files_text') and self.add_files_text.current:
                self.add_files_text.current.value = "–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
                self.page.update()
            print("DEBUG: –§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")

    def show_snack_bar(self, message: str, color: str = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)"""
        if color is None:
            color = self.colors['primary']
        
        self.page.snack_bar = ft.SnackBar(
            content=ft.Text(message),
            bgcolor=color,
            duration=3000,
        )
        self.page.snack_bar.open = True
        self.page.update()

    def open_images_dialog(self, e=None):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
        print("CLICK: open_images_dialog")  # –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∏–∫–µ—Ä –≤ overlay
            if self.file_picker not in self.page.overlay:
                self.page.overlay.append(self.file_picker)
                self.page.update()
                print("FilePicker –¥–æ–±–∞–≤–ª–µ–Ω –≤ overlay")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
            self.page.update()
            print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ (–¥–æ–ª–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ)
            print("–ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞...")
            self.file_picker.pick_files(allow_multiple=True)
            print("pick_files –≤—ã–∑–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            self.show_snack_bar(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}", self.colors['error'])

    def compress_image(self, input_path: str, output_path: str, max_size: int = 2000, quality: int = 85) -> bool:
        """–°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —Å—Ç–∞—Ä–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É)"""
        try:
            from PIL import Image
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(input_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'LA', 'P'):
                    img = img.convert('RGB')
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if max(img.size) > max_size:
                    ratio = max_size / max(img.size)
                    new_size = tuple(int(dim * ratio) for dim in img.size)
                    img = img.resize(new_size, Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img.save(output_path, 'JPEG', quality=quality, optimize=True)
                
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ: {os.path.basename(input_path)} -> {os.path.basename(output_path)}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {input_path}: {e}")
            return False

    async def add_product_to_sheets(self, product: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ Google Sheets"""
        try:
            from scripts.google_sheets_api import GoogleSheetsAPI
            
            sheets_api = GoogleSheetsAPI()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            row_data = [
                product.get('id', ''),
                product.get('order', ''),
                product.get('section', ''),
                product.get('title', ''),
                product.get('price', ''),
                product.get('desc', ''),
                product.get('meta', ''),
                product.get('status', ''),
                product.get('images', ''),
                product.get('link', ''),
                product.get('updated', '')
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ Google Sheets
            await sheets_api.add_product_row(row_data)
            
            print(f"‚úÖ –¢–æ–≤–∞—Ä '{product.get('title')}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Sheets: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

    async def save_products_to_json(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open("products.json", "w", encoding="utf-8") as f:
                json.dump(self.products, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ JSON")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON: {e}")
            raise



    async def show_deploy_view(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        self.current_view = "deploy"
        self.content_area.content = self.create_deploy_view()
        self.page.update()

    async def refresh_products_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤"""
        if not hasattr(self, 'products_table'):
            return
        
        try:
            # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            table_content = self.products_table.controls[1].content
            table_content.controls.clear()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–∞–∑–¥–µ–ª—É
            filtered_products = [
                p for p in self.products 
                if p.get('section', 'home') == self.current_section
            ]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É (order) - —Å–Ω–∞—á–∞–ª–∞ –ø–æ order –∫–∞–∫ —á–∏—Å–ª–æ, –ø–æ—Ç–æ–º –ø–æ id
            filtered_products.sort(key=lambda x: (int(x.get('order', 999)), int(x.get('id', 999))))
            
            print(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º {len(filtered_products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{self.current_section}'")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            for index, product in enumerate(filtered_products):
                print(f"–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä: {product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–ø–æ—Ä—è–¥–æ–∫: {product.get('order', 999)})")
                table_row = self.create_product_table_row(product, index)
                table_content.controls.append(table_row)
            
            self.page.update()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            import traceback
            traceback.print_exc()

    async def sync_products(self, e=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            snack_bar = ft.SnackBar(
                content=ft.Text("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets..."),
                action="OK",
                bgcolor=self.colors['primary'],
            )
            self.page.snack_bar = snack_bar
            snack_bar.open = True
            self.page.update()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if not os.path.exists('auto_update_oauth2.py'):
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                snack_bar = ft.SnackBar(
                    content=ft.Text("‚ùå –§–∞–π–ª auto_update_oauth2.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."),
                    action="OK",
                    bgcolor=self.colors['error'],
                )
                self.page.snack_bar = snack_bar
                snack_bar.open = True
                self.page.update()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if not os.path.exists('token.json'):
                snack_bar = ft.SnackBar(
                    content=ft.Text("‚ùå –¢–æ–∫–µ–Ω Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ OAuth2."),
                    action="OK",
                    bgcolor=self.colors['error'],
                )
                self.page.snack_bar = snack_bar
                snack_bar.open = True
                self.page.update()
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ subprocess
            import subprocess
            result = subprocess.run(['python', '-c', 
                                   'from auto_update_oauth2 import full_sync_oauth2; full_sync_oauth2()'], 
                                  capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
                snack_bar = ft.SnackBar(
                    content=ft.Text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google Sheets"),
                    action="OK",
                    bgcolor=self.colors['success'],
                )
                self.page.snack_bar = snack_bar
                snack_bar.open = True
                self.page.update()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                await self.refresh_products_table()
            else:
                error_msg = result.stderr if result.stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                raise Exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")
            
        except subprocess.TimeoutExpired:
            snack_bar = ft.SnackBar(
                content=ft.Text("‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"),
                action="OK",
                bgcolor=self.colors['error'],
            )
            self.page.snack_bar = snack_bar
            snack_bar.open = True
            self.page.update()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            snack_bar = ft.SnackBar(
                content=ft.Text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"),
                action="OK",
                bgcolor=self.colors['error'],
            )
            self.page.snack_bar = snack_bar
            snack_bar.open = True
            self.page.update()

    async def edit_product(self, product: Dict):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        dialog = ft.AlertDialog(
            title=ft.Text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"),
            content=ft.Text(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product.get('title', '')}"),
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda e: self.page.run_task(self.close_dialog(e))),
                ft.TextButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=lambda e: self.page.run_task(self.save_edit(product))),
            ],
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()

    async def delete_product(self, product: Dict):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        dialog = ft.AlertDialog(
            title=ft.Text("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"),
            content=ft.Text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{product.get('title', '')}'?"),
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda e: self.page.run_task(self.close_dialog(e))),
                ft.TextButton("–£–¥–∞–ª–∏—Ç—å", on_click=lambda e: self.page.run_task(self.confirm_delete(product))),
            ],
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()

    async def close_dialog(self, e):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        self.page.dialog.open = False
        self.page.update()

    async def save_edit(self, product):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.show_snack_bar(f"‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {product.get('title', '')}", self.colors['success'])
            await self.close_dialog(None)
        except Exception as e:
            self.show_snack_bar(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", self.colors['error'])

    async def confirm_delete(self, product):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            self.show_snack_bar(f"üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω: {product.get('title', '')}", self.colors['success'])
            await self.close_dialog(None)
        except Exception as e:
            self.show_snack_bar(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}", self.colors['error'])

    async def add_product_from_form(self, e):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ñ–æ—Ä–º—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            title = self.add_title_field.current.value.strip()
            price = self.add_price_field.current.value.strip()
            desc = self.add_desc_field.current.value.strip()
            meta = self.add_meta_field.current.value.strip()
            section = self.add_section_group.current.value
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not title:
                self.show_snack_bar("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!", self.colors['error'])
                return
            
            if not self.selected_files:
                self.show_snack_bar("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!", self.colors['error'])
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            for product in self.products:
                if product.get('title', '').strip().lower() == title.lower():
                    self.show_snack_bar(f"‚ùå –¢–æ–≤–∞—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", self.colors['error'])
                    return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            if price:
                # –£–±–∏—Ä–∞–µ–º "—Ä." –µ—Å–ª–∏ –µ—Å—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                price = price.replace(' —Ä.', '').replace('—Ä.', '').strip()
                price += ' —Ä.'
            else:
                price = "0 —Ä."
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (—É—á–∏—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã)
            existing_ids = set()
            for product in self.products:
                try:
                    product_id = int(product.get('id', 0))
                    existing_ids.add(product_id)
                except:
                    pass
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π ID
            new_id = 1
            while new_id in existing_ids:
                new_id += 1
            
            new_id = str(new_id)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            folder_name = f"product_{new_id}"
            folder_path = os.path.join('img', folder_name)
            os.makedirs(folder_path, exist_ok=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_names = []
            for i, img_path in enumerate(self.selected_files, 1):
                ext = os.path.splitext(img_path)[1].lower()
                if ext not in ['.jpg', '.jpeg']:
                    ext = '.jpg'
                
                new_name = f"product_{new_id}_{i}{ext}"
                new_path = os.path.join(folder_path, new_name)
                
                if self.compress_image(img_path, new_path):
                    image_names.append(new_name)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è JSON
            images_str = '|'.join(image_names) if image_names else ''
            
            # –°–º–µ—â–∞–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ +1
            for product in self.products:
                if product.get('section') == section:
                    current_order = int(product.get('order', 1))
                    product['order'] = str(current_order + 1)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            new_product = {
                'id': new_id,
                'title': title,
                'price': price,
                'desc': desc,
                'section': section,
                'order': '1',  # –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä 1
                'status': 'active',
                'images': images_str,  # –°—Ç—Ä–æ–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                'meta': meta,
                'link': '',
                'updated': datetime.now().isoformat()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            self.products.append(new_product)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            await self.save_products_to_json()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä)
            await self.add_product_to_sheets(new_product)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await self.refresh_products_table()
            
            self.show_snack_bar(f"‚úÖ –¢–æ–≤–∞—Ä '{title}' –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {new_id}", self.colors['success'])
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤
            await self.show_products_view()
            
        except Exception as e:
            self.show_snack_bar(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}", self.colors['error'])

    async def deploy_site(self, e):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞"""
        try:
            self.show_snack_bar("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞...", self.colors['secondary'])
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            
            self.show_snack_bar("‚úÖ –°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç", self.colors['success'])
            
        except Exception as e:
            self.show_snack_bar(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}", self.colors['error'])

    async def create_archive(self, e):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞"""
        try:
            self.show_snack_bar("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...", self.colors['secondary'])
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
            await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            
            self.show_snack_bar("‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω", self.colors['success'])
            
        except Exception as e:
            self.show_snack_bar(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}", self.colors['error'])

    def select_product(self, product: Dict):
        """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        self.selected_product = product
        self.selected_product_text.current.value = product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        self.edit_button.current.disabled = False
        self.delete_button.current.disabled = False
        print(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        self.page.update()

    def select_preview_product_sync(self, product: Dict):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        self.selected_preview_product = product
        print(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        self.refresh_preview_grid_sync()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if hasattr(self, 'page') and self.page:
            self.page.update()

    def refresh_preview_grid_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        if not self.preview_grid_ref.current:
            return

        grid = self.preview_grid_ref.current
        grid.controls.clear()

        section = getattr(self, "preview_section", "home")
        items = [p for p in self.products if (p.get("section") or "").lower() == section]
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ order
        def to_int(v): 
            try: return int(str(v))
            except: return 0
        items.sort(key=lambda x: to_int(x.get("order", 0)))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–º
        self.preview_products = items.copy()
        
        print(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}'")

        for p in items:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
            is_selected = (self.selected_preview_product and 
                          self.selected_preview_product.get('id') == p.get('id'))
            print(f"–¢–æ–≤–∞—Ä {p.get('id')} - {p.get('title')} –≤—ã–±—Ä–∞–Ω: {is_selected}")

            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É —Ç–æ–≤–∞—Ä–∞
            thumbnail = self.create_product_thumbnail(p)

            # –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–ª–∏—Ç–∫–∏
            tile = ft.Container(
                bgcolor=self.colors["surface"],
                border=ft.border.all(
                    3 if is_selected else 1, 
                    self.colors["primary"] if is_selected else self.colors["outline"]
                ),
                border_radius=12,
                clip_behavior=ft.ClipBehavior.HARD_EDGE,
                content=ft.Column(
                    [
                        # –º–∏–Ω–∏–∞—Ç—é—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (–∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å)
                        ft.Container(
                            content=thumbnail,
                            expand=True,
                        ),
                        # –ø–æ–¥–ø–∏—Å—å –≤–Ω–∏–∑—É
                        ft.Container(
                            content=ft.Text(
                                p.get("title", ""), 
                                size=12, 
                                weight=ft.FontWeight.W_600, 
                                color=self.colors['on_surface'],
                                text_align=ft.TextAlign.CENTER,
                            ),
                            padding=ft.padding.all(8),
                            bgcolor=self.colors['surface'],
                        ),
                    ],
                    expand=True,
                ),
                on_click=lambda e, pid=p.get("id"): self.on_preview_tile_click(pid),
            )

            grid.controls.append(tile)

    async def select_preview_product(self, product: Dict):
        """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        self.selected_preview_product = product
        print(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        await self.refresh_preview_grid()

    def edit_selected_product(self, e):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        if self.selected_product:
            # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if hasattr(self, 'page') and self.page:
                self.page.update()

    async def delete_selected_product(self, e):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        if not self.selected_product:
            self.show_snack_bar(
                ft.SnackBar(
                    content=ft.Text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"),
                    action="OK",
                    bgcolor=self.colors['error'],
                )
            )
            return
        
        try:
            product_to_delete = self.selected_product
            product_id = product_to_delete.get('id')
            product_section = product_to_delete.get('section')
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
            self.products = [p for p in self.products if p.get('id') != product_id]
            
            # –°–º–µ—â–∞–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for product in self.products:
                if product.get('section') == product_section:
                    current_order = int(product.get('order', 1))
                    deleted_order = int(product_to_delete.get('order', 1))
                    if current_order > deleted_order:
                        product['order'] = str(current_order - 1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            await self.save_products_to_json()
            
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            folder_path = f"img/product_{product_id}"
            if os.path.exists(folder_path):
                import shutil
                shutil.rmtree(folder_path)
                print(f"‚úÖ –ü–∞–ø–∫–∞ {folder_path} —É–¥–∞–ª–µ–Ω–∞")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await self.refresh_products_table()
            
            # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
            self.selected_product = None
            self.selected_product_text.current.value = "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"
            self.edit_button.current.disabled = True
            self.delete_button.current.disabled = True
            
            self.show_snack_bar(f"‚úÖ –¢–æ–≤–∞—Ä '{product_to_delete.get('title')}' —É–¥–∞–ª–µ–Ω", self.colors['success'])
            
            self.page.update()
            
        except Exception as e:
            self.show_snack_bar(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}", self.colors['error'])

    def deploy_site(self, e):
        """–î–µ–ø–ª–æ–π —Å–∞–π—Ç–∞"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            snack_bar = ft.SnackBar(
                content=ft.Text("üöÄ –î–µ–ø–ª–æ–π —Å–∞–π—Ç–∞..."),
                action="OK",
                bgcolor=self.colors['success'],
            )
            self.page.snack_bar = snack_bar
            snack_bar.open = True
            self.page.update()
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–µ–ø–ª–æ—è
            # –ü–æ–∫–∞ —á—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            if hasattr(self, 'page') and self.page:
                self.page.update()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")
            snack_bar = ft.SnackBar(
                content=ft.Text(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}"),
                action="OK",
                bgcolor=self.colors['error'],
            )
            self.page.snack_bar = snack_bar
            snack_bar.open = True
            self.page.update()

    async def perform_deploy(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è"""
        try:
            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            snack_bar = ft.SnackBar(
                content=ft.Text("‚úÖ –°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!"),
                action="OK",
                bgcolor=self.colors['success'],
            )
            self.page.snack_bar = snack_bar
            snack_bar.open = True
            self.page.update()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ø–ª–æ—è: {e}")

    async def auto_sync_with_sheets(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets"""
        try:
            print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google API
            if not os.path.exists("google_api_config.json"):
                print("‚ö†Ô∏è Google API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets
            # –ü–æ–∫–∞ —á—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            await asyncio.sleep(1)
            
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    async def load_from_sheets(self, e):
        """–ü–æ–¥–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            snack_bar = ft.SnackBar(
                content=ft.Text("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets..."),
                action="OK",
                bgcolor=self.colors['secondary'],
            )
            self.page.snack_bar = snack_bar
            snack_bar.open = True
            self.page.update()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
            new_products = await self.load_products_from_sheets()
            
            if new_products:
                # –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
                await self.smart_update_products(new_products)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                await self.refresh_products_table()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
                snack_bar = ft.SnackBar(
                    content=ft.Text(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(new_products)} —Ç–æ–≤–∞—Ä–æ–≤ —Å Google Sheets"),
                    action="OK",
                    bgcolor=self.colors['success'],
                )
                self.page.snack_bar = snack_bar
                snack_bar.open = True
                self.page.update()
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                snack_bar = ft.SnackBar(
                    content=ft.Text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Google Sheets"),
                    action="OK",
                    bgcolor=self.colors['error'],
                )
                self.page.snack_bar = snack_bar
                snack_bar.open = True
                self.page.update()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å Google Sheets: {e}")
            snack_bar = ft.SnackBar(
                content=ft.Text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}"),
                action="OK",
                bgcolor=self.colors['error'],
            )
            self.page.snack_bar = snack_bar
            snack_bar.open = True
            self.page.update()

    async def load_products_from_sheets(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google Sheets —á–µ—Ä–µ–∑ OAuth2"""
        try:
            import gspread
            from google.oauth2.credentials import Credentials
            import json
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Google Sheets
            try:
                with open('google_api_config.json', 'r') as f:
                    config = json.load(f)
                    spreadsheet_id = config.get('spreadsheet_id')
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return []
            
            if not spreadsheet_id:
                print("‚ùå ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ OAuth2
            if not os.path.exists('token.json'):
                print("‚ùå –§–∞–π–ª token.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OAuth2")
                return []
            
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets —á–µ—Ä–µ–∑ OAuth2 (ID: {spreadsheet_id})...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets API
            SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
            CREDENTIALS_FILE = 'token.json'
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
            creds = Credentials.from_authorized_user_file(CREDENTIALS_FILE, scopes=SCOPES)
            client = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = client.open_by_key(spreadsheet_id)
            worksheet = spreadsheet.sheet1
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            all_values = worksheet.get_all_values()
            if not all_values:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞!")
                return []
            
            headers = all_values[0]
            data = all_values[1:]
            
            print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(data)}")
            
            products = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            for i, row in enumerate(data, 1):
                if not row or len(row) < 4:  # –ú–∏–Ω–∏–º—É–º ID, Order, Section, Title
                    continue
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                def clean_text(text):
                    if not text:
                        return ''
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                    text = str(text).strip().replace('\n', ' ').replace('\r', ' ')
                    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
                    while '  ' in text:
                        text = text.replace('  ', ' ')
                    return text
                
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                    product_id = clean_text(row[0]) if len(row) > 0 else ""
                    order = clean_text(row[1]) if len(row) > 1 else ""
                    section = clean_text(row[2]) if len(row) > 2 else ""
                    title = clean_text(row[3]) if len(row) > 3 else ""
                    price = clean_text(row[4]) if len(row) > 4 else ""
                    desc = clean_text(row[5]) if len(row) > 5 else ""
                    meta = clean_text(row[6]) if len(row) > 6 else ""
                    status = clean_text(row[7]) if len(row) > 7 else ""
                    images = clean_text(row[8]) if len(row) > 8 else ""
                    link = clean_text(row[9]) if len(row) > 9 else ""
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    if not title:
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
                    product = {
                        'id': product_id,
                        'order': order,
                        'section': section,
                        'title': title,
                        'price': price,
                        'desc': desc,
                        'meta': meta,
                        'status': status,
                        'images': images,
                        'link': link,
                        'updated': datetime.now().isoformat()
                    }
                    
                    products.append(product)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–≤–∞—Ä: {title} (ID: {product_id}, Order: {order}, Section: {section})")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                    continue
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {e}")
            return []

    async def smart_update_products(self, new_products):
        """–£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ ID"""
        try:
            print("üß† –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ID...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ID
            existing_products = {}
            for product in self.products:
                if 'id' in product and product['id']:
                    existing_products[product['id']] = product
            
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(existing_products)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            
            updated_count = 0
            new_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            final_products = []
            for new_product in new_products:
                product_id = new_product.get('id', '')
                
                if product_id in existing_products:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                    existing_product = existing_products[product_id]
                    existing_product.update(new_product)
                    final_products.append(existing_product)
                    updated_count += 1
                    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {new_product['title']} (ID: {product_id})")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    final_products.append(new_product)
                    new_count += 1
                    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {new_product['title']} (ID: {product_id})")
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            self.products = final_products
            
            print(f"‚úÖ –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {updated_count} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {new_count} –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await self.save_products()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    async def save_products(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open("products.json", "w", encoding="utf-8") as f:
                json.dump(self.products, f, ensure_ascii=False, indent=2)
            print("‚úÖ –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ products.json")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")

    async def move_product_up(self, e=None):
        """–ü–æ–¥–Ω—è—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø–æ—Ä—è–¥–∫–µ"""
        if not self.selected_preview_product:
            self.show_notification("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞", "error")
            return
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            current_index = None
            for i, product in enumerate(self.preview_products):
                if product.get('id') == self.selected_preview_product.get('id'):
                    current_index = i
                    break
            
            if current_index is None or current_index == 0:
                self.show_notification("‚ùå –¢–æ–≤–∞—Ä —É–∂–µ –Ω–∞–≤–µ—Ä—Ö—É", "error")
                return
            
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ç–æ–≤–∞—Ä–æ–º
            self.preview_products[current_index], self.preview_products[current_index - 1] = \
                self.preview_products[current_index - 1], self.preview_products[current_index]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
            self.update_products_order()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            await self.refresh_preview_grid()
            
            self.show_notification("‚úÖ –¢–æ–≤–∞—Ä –ø–æ–¥–Ω—è—Ç", "success")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–Ω—è—Ç–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            self.show_notification("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–Ω—è—Ç–∏—è —Ç–æ–≤–∞—Ä–∞", "error")

    async def move_product_down(self, e=None):
        """–û–ø—É—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø–æ—Ä—è–¥–∫–µ"""
        if not self.selected_preview_product:
            self.show_notification("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞", "error")
            return
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            current_index = None
            for i, product in enumerate(self.preview_products):
                if product.get('id') == self.selected_preview_product.get('id'):
                    current_index = i
                    break
            
            if current_index is None or current_index == len(self.preview_products) - 1:
                self.show_notification("‚ùå –¢–æ–≤–∞—Ä —É–∂–µ –≤–Ω–∏–∑—É", "error")
                return
            
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç–æ–≤–∞—Ä–æ–º
            self.preview_products[current_index], self.preview_products[current_index + 1] = \
                self.preview_products[current_index + 1], self.preview_products[current_index]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
            self.update_products_order()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            await self.refresh_preview_grid()
            
            self.show_notification("‚úÖ –¢–æ–≤–∞—Ä –æ–ø—É—â–µ–Ω", "success")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–ø—É—Å–∫–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            self.show_notification("‚ùå –û—à–∏–±–∫–∞ –æ–ø—É—Å–∫–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", "error")

    async def save_product_order(self, e=None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
            self.update_products_order()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            await self.save_products()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
            await self.update_sheets_order()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
            await self.refresh_products_table()
            
            self.show_notification("‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª –∏ Google Sheets", "success")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞: {e}")
            self.show_notification("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞", "error")

    def update_products_order(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ID
            products_dict = {p.get('id'): p for p in self.products}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ preview_products
            for i, preview_product in enumerate(self.preview_products):
                product_id = preview_product.get('id')
                if product_id in products_dict:
                    products_dict[product_id]['order'] = i + 1
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è {len(self.preview_products)} —Ç–æ–≤–∞—Ä–æ–≤")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞: {e}")

    async def update_sheets_order(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Google Sheets"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google API
            if not os.path.exists("google_api_config.json"):
                print("‚ö†Ô∏è Google API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
            try:
                from scripts.google_sheets_api import GoogleSheetsAPI
            except ImportError:
                print("‚ö†Ô∏è –ú–æ–¥—É–ª—å Google Sheets API –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
            sheets_api = GoogleSheetsAPI()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ Sheets
            for i, preview_product in enumerate(self.preview_products):
                product_id = preview_product.get('id')
                new_order = i + 1
                
                # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
                for product in self.products:
                    if product.get('id') == product_id:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ Sheets
                        await sheets_api.update_product_order(product_id, new_order)
                        break
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –≤ Google Sheets –¥–ª—è {len(self.preview_products)} —Ç–æ–≤–∞—Ä–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤ Google Sheets: {e}")

    def show_notification(self, message: str, type: str = "info"):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            color_map = {
                "success": self.colors['success'],
                "error": self.colors['error'],
                "info": self.colors['primary']
            }
            
            snack_bar = ft.SnackBar(
                content=ft.Text(message),
                action="OK",
                bgcolor=color_map.get(type, self.colors['primary']),
            )
            self.page.snack_bar = snack_bar
            snack_bar.open = True
            self.page.update()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def update_selected_product_indicator(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        try:
            if hasattr(self, 'page') and self.page:
                self.page.update()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")

    def on_preview_tile_click(self, product_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø–ª–∏—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –ø–æ ID
            product = None
            for p in self.preview_products:
                if p.get('id') == product_id:
                    product = p
                    break
            
            if not product:
                print(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä - –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
            if (self.selected_preview_product and 
                self.selected_preview_product.get('id') != product_id):
                
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Ç–æ–≤–∞—Ä–æ–≤
                current_index = None
                new_index = None
                
                for i, p in enumerate(self.preview_products):
                    if p.get('id') == self.selected_preview_product.get('id'):
                        current_index = i
                    if p.get('id') == product_id:
                        new_index = i
                
                if current_index is not None and new_index is not None:
                    # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
                    self.preview_products[current_index], self.preview_products[new_index] = \
                        self.preview_products[new_index], self.preview_products[current_index]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
                    self.update_products_order()
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                    self.selected_preview_product = None
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É
                    self.refresh_preview_grid_sync()
                    if hasattr(self, 'page') and self.page:
                        self.page.update()
                    
                    print(f"‚úÖ –¢–æ–≤–∞—Ä—ã –ø–æ–º–µ–Ω—è–Ω—ã –º–µ—Å—Ç–∞–º–∏: {self.selected_preview_product.get('title') if self.selected_preview_product else 'None'} ‚Üî {product.get('title')}")
                    return
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ –∏–ª–∏ —Ç–æ—Ç –∂–µ —Ç–æ–≤–∞—Ä - –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–µ–ª—è–µ–º
            self.select_preview_product_sync(product)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞: {e}")

    async def refresh_preview_grid(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        if not self.preview_grid_ref.current:
            return

        grid = self.preview_grid_ref.current
        grid.controls.clear()

        section = getattr(self, "preview_section", "home")
        items = [p for p in self.products if (p.get("section") or "").lower() == section]
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ order
        def to_int(v): 
            try: return int(str(v))
            except: return 0
        items.sort(key=lambda x: to_int(x.get("order", 0)))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–º
        self.preview_products = items.copy()
        
        print(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}'")

        for p in items:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
            is_selected = (self.selected_preview_product and 
                          self.selected_preview_product.get('id') == p.get('id'))
            print(f"–¢–æ–≤–∞—Ä {p.get('id')} - {p.get('title')} –≤—ã–±—Ä–∞–Ω: {is_selected}")

            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É —Ç–æ–≤–∞—Ä–∞
            thumbnail = self.create_product_thumbnail(p)

            # –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–ª–∏—Ç–∫–∏
            tile = ft.Container(
                bgcolor=self.colors["surface"],
                border=ft.border.all(
                    3 if is_selected else 1, 
                    self.colors["primary"] if is_selected else self.colors["outline"]
                ),
                border_radius=12,
                clip_behavior=ft.ClipBehavior.HARD_EDGE,
                content=ft.Column(
                    [
                        # –º–∏–Ω–∏–∞—Ç—é—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (–∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å)
                        ft.Container(
                            content=thumbnail,
                            expand=True,
                        ),
                        # –ø–æ–¥–ø–∏—Å—å –≤–Ω–∏–∑—É
                        ft.Container(
                            content=ft.Text(
                                p.get("title", ""), 
                                size=12, 
                                weight=ft.FontWeight.W_600, 
                                color=self.colors['on_surface'],
                                text_align=ft.TextAlign.CENTER,
                            ),
                            padding=ft.padding.all(8),
                            bgcolor=self.colors['surface'],
                        ),
                    ],
                    expand=True,
                ),
                on_click=lambda e, pid=p.get("id"): self.on_preview_tile_click(pid),
            )

            grid.controls.append(tile)

        self.page.update()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = PlatformaManagerFinal()
    ft.app(target=app.main, view=ft.WEB_BROWSER)

if __name__ == "__main__":
    main()

