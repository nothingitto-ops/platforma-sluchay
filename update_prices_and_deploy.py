#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import shutil
from datetime import datetime
import gspread
from google.oauth2.credentials import Credentials
import zipfile

def update_prices_in_products():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ —Ñ–∞–π–ª–µ products.json"""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ products.json...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    with open('products.json', 'r', encoding='utf-8') as f:
        products = json.load(f)
    
    updated_count = 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã
    for product in products:
        product_id = product.get('id', '')
        title = product.get('title', '').lower()
        section = product.get('section', '')
        
        # –ü–ª–∞—Ç–∫–∏ –Ω–∞ —à–µ—é (ID 9 –∏ 12)
        if product_id in ['9', '12'] and '–ø–ª–∞—Ç–æ–∫' in title:
            if product['price'] != '1000 —Ä.':
                old_price = product['price']
                product['price'] = '1000 —Ä.'
                product['updated'] = datetime.now().isoformat()
                print(f"‚úÖ –ü–ª–∞—Ç–æ–∫ (ID {product_id}): {old_price} ‚Üí 1000 —Ä.")
                updated_count += 1
        
        # –ü–æ—è—Å —Ü–≤–µ—Ç–æ—á–Ω—ã–π (ID 1 –≤ —Ä–∞–∑–¥–µ–ª–µ nessffo)
        elif product_id == '1' and section == 'nessffo' and '—Ü–≤–µ—Ç–æ—á–Ω—ã–π' in title:
            if product['price'] != '3000 —Ä.':
                old_price = product['price']
                product['price'] = '3000 —Ä.'
                product['updated'] = datetime.now().isoformat()
                print(f"‚úÖ –ü–æ—è—Å —Ü–≤–µ—Ç–æ—á–Ω—ã–π (ID {product_id}): {old_price} ‚Üí 3000 —Ä.")
                updated_count += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('products.json', 'w', encoding='utf-8') as f:
        json.dump(products, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ products.json")
    return products

def update_google_sheets(products):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
    try:
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ OAuth2
        if not os.path.exists('token.json') or not os.path.exists('google_api_config.json'):
            print("‚ùå –§–∞–π–ª—ã OAuth2 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open('google_api_config.json', 'r') as f:
            config = json.load(f)
            spreadsheet_id = config.get('spreadsheet_id')
        
        if not spreadsheet_id:
            print("‚ùå ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets API
        SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
        CREDENTIALS_FILE = 'token.json'
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
        creds = Credentials.from_authorized_user_file(CREDENTIALS_FILE, scopes=SCOPES)
        client = gspread.authorize(creds)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = client.open_by_key(spreadsheet_id)
        worksheet = spreadsheet.sheet1
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_values = worksheet.get_all_values()
        if not all_values:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞!")
            return False
        
        headers = all_values[0]
        data = all_values[1:]
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        updated_products = {}
        for product in products:
            product_id = str(product.get('id', ''))
            title = product.get('title', '').lower()
            section = product.get('section', '')
            
            # –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
            if (product_id in ['9', '12'] and '–ø–ª–∞—Ç–æ–∫' in title) or \
               (product_id == '1' and section == 'nessffo' and '—Ü–≤–µ—Ç–æ—á–Ω—ã–π' in title):
                updated_products[product_id] = product
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
        updated_count = 0
        for i, row in enumerate(data, 2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if len(row) > 0:
                product_id = str(row[0])
                if product_id in updated_products:
                    product = updated_products[product_id]
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    update_data = [
                        product.get('id', ''),
                        product.get('order', ''),
                        product.get('section', ''),
                        product.get('title', ''),
                        product.get('price', ''),
                        product.get('desc', ''),
                        product.get('meta', ''),
                        product.get('status', ''),
                        product.get('images', ''),
                        product.get('link', '')
                    ]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
                    worksheet.update(f'A{i}:J{i}', [update_data])
                    updated_count += 1
                    print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {i}: {product.get('title', '')} ‚Üí {product.get('price', '')}")
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ Google Sheets")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets: {e}")
        return False

def create_deploy_archive():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –¥–µ–ø–ª–æ—è"""
    try:
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –¥–µ–ø–ª–æ—è...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–µ–ø–ª–æ—è
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        deploy_folder = f"deploy_{timestamp}"
        os.makedirs(deploy_folder, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å–∞–π—Ç–∞
        web_files = [
            'web/index.html',
            'web/app.min.js',
            'web/styles.min.css',
            'web/mobile.overrides.css',
            'web/card-titles.css'
        ]
        
        for file_path in web_files:
            if os.path.exists(file_path):
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                dest_path = os.path.join(deploy_folder, file_path.replace('web/', ''))
                os.makedirs(os.path.dirname(dest_path), exist_ok=True)
                shutil.copy2(file_path, dest_path)
                print(f"üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file_path}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if os.path.exists('web/img'):
            shutil.copytree('web/img', os.path.join(deploy_folder, 'img'))
            print("üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π products.json
        shutil.copy2('products.json', os.path.join(deploy_folder, 'products.json'))
        print("üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω products.json")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
        archive_name = f"platforma_deploy_{timestamp}.zip"
        with zipfile.ZipFile(archive_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(deploy_folder):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, deploy_folder)
                    zipf.write(file_path, arcname)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        shutil.rmtree(deploy_folder)
        
        print(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_name}")
        return archive_name
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ –¥–µ–ø–ª–æ–π...")
    print("=" * 50)
    
    # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ products.json
    products = update_prices_in_products()
    
    # 2. –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
    sheets_updated = update_google_sheets(products)
    
    # 3. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è
    archive_name = create_deploy_archive()
    
    print("=" * 50)
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    if sheets_updated:
        print("‚úÖ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ö†Ô∏è Google Sheets –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OAuth2)")
    
    if archive_name:
        print(f"‚úÖ –ê—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è: {archive_name}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞")
    
    print("\nüìã –ß—Ç–æ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:")
    print("‚Ä¢ –ü–ª–∞—Ç–∫–∏ –Ω–∞ —à–µ—é (ID 9, 12): 1500 —Ä. ‚Üí 1000 —Ä.")
    print("‚Ä¢ –ü–æ—è—Å —Ü–≤–µ—Ç–æ—á–Ω—ã–π (ID 1): 3600 —Ä. ‚Üí 3000 —Ä.")

if __name__ == "__main__":
    main()
