#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import gspread
from google.oauth2.credentials import Credentials
from datetime import datetime

def remove_dots_final():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∏–∑ –≤—Å–µ—Ö –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    print("üîß –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∏–∑ –≤—Å–µ—Ö –æ–ø–∏—Å–∞–Ω–∏–π...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open('products.json', 'r', encoding='utf-8') as f:
        products = json.load(f)
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π
    updated = False
    
    for product in products:
        desc = product.get('desc', '')
        if desc and desc.endswith('.'):
            new_desc = desc.rstrip('.')
            if new_desc != desc:
                print(f"‚ùå –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è '{product.get('title', '')}': {desc} ‚Üí {new_desc}")
                product['desc'] = new_desc
                product['updated'] = datetime.now().isoformat()
                updated = True
        else:
            print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ '{product.get('title', '')}' —É–∂–µ –±–µ–∑ —Ç–æ—á–∫–∏: {desc}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if updated:
        with open('products.json', 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        print("‚úÖ products.json –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
        try:
            SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
            CREDENTIALS_FILE = 'token.json'
            
            creds = Credentials.from_authorized_user_file(CREDENTIALS_FILE, scopes=SCOPES)
            client = gspread.authorize(creds)
            
            sheet = client.open_by_key('1FLlyjpSd9EBOxZC8f0B6-iKRpKCMxcTRqWOHlgUpFoQ').sheet1
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            all_values = sheet.get_all_values()
            headers = all_values[0]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
            for row_idx, row in enumerate(all_values[1:], start=2):
                if len(row) >= 6:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å Desc
                    try:
                        current_desc = row[5]  # Desc –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–ª–æ–Ω–∫–µ F (–∏–Ω–¥–µ–∫—Å 5)
                        if current_desc and current_desc.endswith('.'):
                            new_desc = current_desc.rstrip('.')
                            if new_desc != current_desc:
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
                                update_data = [
                                    row[0],  # ID
                                    row[1],  # Order
                                    row[2],  # Section
                                    row[3],  # Title
                                    row[4],  # Price
                                    new_desc,   # Desc (–±–µ–∑ —Ç–æ—á–∫–∏)
                                    row[6] if len(row) > 6 else '',  # Meta
                                    row[7] if len(row) > 7 else '',  # Status
                                    row[8] if len(row) > 8 else '',  # Images
                                    row[9] if len(row) > 9 else '',  # Link
                                    row[10] if len(row) > 10 else ''  # Hash
                                ]
                                
                                sheet.update(f'A{row_idx}:K{row_idx}', [update_data])
                                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_idx}: —É–±—Ä–∞–Ω–∞ —Ç–æ—á–∫–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                                
                    except (ValueError, IndexError):
                        continue
            
            print("‚úÖ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets: {e}")
    else:
        print("‚úÖ –í—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è —É–∂–µ –±–µ–∑ —Ç–æ—á–µ–∫!")

if __name__ == "__main__":
    remove_dots_final()
