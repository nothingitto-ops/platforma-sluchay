#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import gspread
from google.oauth2.credentials import Credentials
from datetime import datetime

def sync_from_sheets():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
    try:
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open('google_api_config.json', 'r') as f:
            config = json.load(f)
            spreadsheet_id = config.get('spreadsheet_id')
        
        SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
        creds = Credentials.from_authorized_user_file('token.json', scopes=SCOPES)
        client = gspread.authorize(creds)
        
        spreadsheet = client.open_by_key(spreadsheet_id)
        worksheet = spreadsheet.sheet1
        all_values = worksheet.get_all_values()
        
        if not all_values:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞!")
            return False
        
        headers = all_values[0]
        data = all_values[1:]
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(data)}")
        
        products = []
        for i, row in enumerate(data, 1):
            if not row or len(row) < 4:
                continue
            
            try:
                product_id = row[0] if len(row) > 0 else ""
                order = row[1] if len(row) > 1 else ""
                section = row[2] if len(row) > 2 else ""
                title = row[3] if len(row) > 3 else ""
                price = row[4] if len(row) > 4 else ""
                desc = row[5] if len(row) > 5 else ""
                meta = row[6] if len(row) > 6 else ""
                status = row[7] if len(row) > 7 else ""
                images = row[8] if len(row) > 8 else ""
                link = row[9] if len(row) > 9 else ""
                
                if not title:
                    continue
                
                product = {
                    'id': product_id,
                    'order': order,
                    'section': section,
                    'title': title,
                    'price': price,
                    'desc': desc,
                    'meta': meta,
                    'status': status,
                    'images': images,
                    'link': link,
                    'updated': datetime.now().isoformat()
                }
                
                products.append(product)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {title} - {price}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ products.json
        with open('products.json', 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ web/products.json
        with open('web/products.json', 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def update_app_js():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ app.min.js —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ app.min.js...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        with open('products.json', 'r', encoding='utf-8') as f:
            products = json.load(f)
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π app.min.js
        with open('web/app.min.js', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
        start_marker = 'const items = ['
        end_marker = '];'
        
        start_pos = content.find(start_marker)
        if start_pos == -1:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        end_pos = content.find(end_marker, start_pos)
        if end_pos == -1:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –∫–æ–Ω—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        items_data = []
        for product in products:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤
            images = product.get('images', '').split(',') if product.get('images') else []
            images = [img.strip() for img in images if img.strip()]
            
            item = {
                "images": images,
                "title": product.get('title', ''),
                "price": product.get('price', ''),
                "desc": product.get('desc', ''),
                "meta": product.get('meta', ''),
                "link": product.get('link', ''),
                "status": product.get('status', ''),
                "order": int(product.get('order', 0)),
                "section": product.get('section', 'home')
            }
            items_data.append(item)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        new_items_json = json.dumps(items_data, ensure_ascii=False, indent=2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        new_content = content[:start_pos + len(start_marker)] + '\n' + new_items_json + '\n' + content[end_pos:]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –¥–∞—Ç–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_comment = f"// –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ products.json: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        new_content = update_comment + new_content
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open('web/app.min.js', 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print("‚úÖ app.min.js –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è app.min.js: {e}")
        return False

def main():
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ –¥–µ–ø–ª–æ–π")
    print("=" * 40)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if not sync_from_sheets():
        print("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º app.min.js
    if not update_app_js():
        print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ app.min.js –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return
    
    print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –Ω–∞ GitHub")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
    try:
        print("\nüêô –ó–∞–ø—É—Å–∫ GitHub –¥–µ–ø–ª–æ—è...")
        from github_deploy import GitHubDeployer
        deployer = GitHubDeployer()
        success = deployer.deploy(auto_commit=True, open_desktop=False)
        
        if success:
            print("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")

if __name__ == "__main__":
    main()
