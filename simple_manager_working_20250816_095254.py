#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import customtkinter as ctk
import json
import os
import subprocess
import shutil
import re
from datetime import datetime

class PlatformaManagerModern:
    def __init__(self, root):
        self.root = root
        self.root.title("Platforma Manager - –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        self.root.geometry("1400x900")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
        self.font_base = ('Arial', 12)
        self.font_bold = ('Arial', 12, 'bold')
        self.font_header = ('Arial', 14, 'bold')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_section = 'home'
        self.web_server = None
        self.web_server_thread = None
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        self.web_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "web_combined_working")
        self.images_dir = "img"
        self.products_file = "products.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_products()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_ui()
        
    def load_products(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ products_data.json
            if os.path.exists(self.products_file):
                with open(self.products_file, 'r', encoding='utf-8') as f:
                    self.products = json.load(f)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {self.products_file}")
            # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∏–∑ products.json
            elif os.path.exists('products.json'):
                with open('products.json', 'r', encoding='utf-8') as f:
                    self.products = json.load(f)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ products.json")
            else:
                print("üìù –§–∞–π–ª —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                self.products = []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            self.products = []
    
    def save_products(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        try:
            with open(self.products_file, 'w', encoding='utf-8') as f:
                json.dump(self.products, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.products_file}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            self.root.after(100, self.update_data_local)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.create_navigation_bar(main_container)
        
        # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.create_content_area(main_container)
    
    def create_navigation_bar(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_bar = ttk.Frame(parent)
        action_bar.pack(fill=tk.X, pady=(0, 20))
        
        # –ü–æ–∏—Å–∫
        search_frame = ttk.Frame(action_bar)
        search_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Label(search_frame, text="–ü–æ–∏—Å–∫:", font=self.font_base).pack(side=tk.LEFT, padx=(0, 10))
        self.search_var = tk.StringVar()
        search_entry = ttk.Entry(search_frame, textvariable=self.search_var, width=30)
        search_entry.pack(side=tk.LEFT)
        search_entry.bind("<Return>", lambda e: self.apply_search())
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_frame = ttk.Frame(action_bar)
        buttons_frame.pack(side=tk.RIGHT)
        
        ttk.Button(buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=self.show_add_section, 
                  style='Accent.TButton').pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üìù –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", command=self.update_data_local).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üöÄ –û–±–Ω–æ–≤–∏—Ç—å + –î–µ–ø–ª–æ–π", command=self.update_data, 
                  style='Accent.TButton').pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å app.min.js", command=self.update_app_js).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä", command=self.show_preview_window).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üêô GitHub", command=self.github_deploy).pack(side=tk.LEFT, padx=(0, 5))
    
    def create_content_area(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.content_frame = ttk.Frame(parent)
        self.content_frame.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        self.create_products_section()
        self.create_add_section()
        self.create_deploy_section()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.show_products_section()
    
    def create_products_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        self.products_frame = ttk.Frame(self.content_frame)
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏
        sidebar = ttk.Frame(self.products_frame, width=200)
        sidebar.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 20))
        
        ttk.Label(sidebar, text="–†–∞–∑–¥–µ–ª—ã:", font=self.font_header).pack(anchor=tk.W, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
        self.section_buttons = {}
        sections = [('home', 'üè† –ì–ª–∞–≤–Ω–∞—è'), ('nessffo', 'üìã Nessffo')]
        
        for section_id, section_name in sections:
            btn = ttk.Button(sidebar, text=section_name, 
                           command=lambda s=section_id: self.filter_by_section(s))
            btn.pack(fill=tk.X, pady=2)
            self.section_buttons[section_id] = btn
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        main_area = ttk.Frame(self.products_frame)
        main_area.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(main_area, text="–¢–æ–≤–∞—Ä—ã", font=self.font_header).pack(anchor=tk.W, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        columns = ('ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–°—Ç–∞—Ç—É—Å', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', '–†–∞–∑–¥–µ–ª', '–ü–æ—Ä—è–¥–æ–∫')
        self.products_tree = ttk.Treeview(main_area, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.products_tree.heading(col, text=col)
            self.products_tree.column(col, width=100)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        self.products_tree.column('ID', width=80)
        self.products_tree.column('–ù–∞–∑–≤–∞–Ω–∏–µ', width=200)
        self.products_tree.column('–¶–µ–Ω–∞', width=100)
        self.products_tree.column('–°—Ç–∞—Ç—É—Å', width=100)
        self.products_tree.column('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', width=100)
        self.products_tree.column('–†–∞–∑–¥–µ–ª', width=80)
        self.products_tree.column('–ü–æ—Ä—è–¥–æ–∫', width=80)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(main_area, orient=tk.VERTICAL, command=self.products_tree.yview)
        self.products_tree.configure(yscrollcommand=scrollbar.set)
        
        self.products_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        actions_frame = ttk.Frame(main_area)
        actions_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(actions_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_selected_product).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(actions_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self.delete_selected_product).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(actions_frame, text="üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", command=self.manage_images).pack(side=tk.LEFT, padx=(0, 5))
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.products_tree.bind('<Double-1>', lambda e: self.edit_selected_product())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        self.refresh_products_list()
    
    def create_add_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        self.add_frame = ttk.Frame(self.content_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(self.add_frame, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞", font=self.font_header).pack(anchor=tk.W, pady=(0, 20))
        
        # –§–æ—Ä–º–∞
        form_frame = ttk.Frame(self.add_frame)
        form_frame.pack(fill=tk.BOTH, expand=True)
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        left_col = ttk.Frame(form_frame)
        left_col.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 20))
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields = [
            ('ID —Ç–æ–≤–∞—Ä–∞:', 'product_id_var'),
            ('–ù–∞–∑–≤–∞–Ω–∏–µ:', 'title_var'),
            ('–¶–µ–Ω–∞:', 'price_var'),
            ('–û–ø–∏—Å–∞–Ω–∏–µ:', 'desc_var'),
            ('–°–æ—Å—Ç–∞–≤:', 'meta_var')
        ]
        
        self.form_vars = {}
        for i, (label, var_name) in enumerate(fields):
            frame = ttk.Frame(left_col)
            frame.pack(fill=tk.X, pady=5)
            
            ttk.Label(frame, text=label, width=15).pack(side=tk.LEFT)
            var = tk.StringVar()
            
            # –î–ª—è –ø–æ–ª—è ID –¥–µ–ª–∞–µ–º –µ–≥–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if var_name == 'product_id_var':
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID
                max_id = 0
                for p in self.products:
                    try:
                        p_id = int(p.get('id', '0'))
                        max_id = max(max_id, p_id)
                    except ValueError:
                        continue
                next_id = str(max_id + 1)
                var.set(next_id)
                
                entry = ttk.Entry(frame, textvariable=var, width=40, state='readonly')
            else:
                entry = ttk.Entry(frame, textvariable=var, width=40)
            
            entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
            self.form_vars[var_name] = var
        
        # –°—Ç–∞—Ç—É—Å
        status_frame = ttk.Frame(left_col)
        status_frame.pack(fill=tk.X, pady=5)
        ttk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å:", width=15).pack(side=tk.LEFT)
        self.status_var = tk.StringVar(value="preorder")
        ttk.Radiobutton(status_frame, text="–ü–æ–¥ –∑–∞–∫–∞–∑", variable=self.status_var, value="preorder").pack(side=tk.LEFT)
        ttk.Radiobutton(status_frame, text="–í –Ω–∞–ª–∏—á–∏–∏", variable=self.status_var, value="stock").pack(side=tk.LEFT)
        
        # –†–∞–∑–¥–µ–ª
        section_frame = ttk.Frame(left_col)
        section_frame.pack(fill=tk.X, pady=5)
        ttk.Label(section_frame, text="–†–∞–∑–¥–µ–ª:", width=15).pack(side=tk.LEFT)
        self.section_var = tk.StringVar(value="home")
        ttk.Radiobutton(section_frame, text="–ì–ª–∞–≤–Ω–∞—è", variable=self.section_var, value="home").pack(side=tk.LEFT)
        ttk.Radiobutton(section_frame, text="Nessffo", variable=self.section_var, value="nessffo").pack(side=tk.LEFT)
        
        # –ü–æ—Ä—è–¥–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        order_frame = ttk.Frame(left_col)
        order_frame.pack(fill=tk.X, pady=5)
        ttk.Label(order_frame, text="–ü–æ—Ä—è–¥–æ–∫:", width=15).pack(side=tk.LEFT)
        self.order_display_var = tk.StringVar(value="13")
        order_entry = ttk.Entry(order_frame, textvariable=self.order_display_var, width=10, state='readonly')
        order_entry.pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(order_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.update_order_display).pack(side=tk.LEFT)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.update_order_display()
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        right_col = ttk.Frame(form_frame)
        right_col.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ttk.Label(right_col, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", font=self.font_bold).pack(anchor=tk.W, pady=(0, 10))
        
        self.images_listbox = tk.Listbox(right_col, height=10)
        self.images_listbox.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        images_buttons = ttk.Frame(right_col)
        images_buttons.pack(fill=tk.X)
        
        ttk.Button(images_buttons, text="üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", command=self.select_images_folder).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(images_buttons, text="üìÑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã", command=self.add_single_image).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(images_buttons, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_images).pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = ttk.Frame(self.add_frame)
        actions_frame.pack(fill=tk.X, pady=(20, 0))
        
        ttk.Button(actions_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", command=self.save_new_product, 
                  style='Accent.TButton').pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(actions_frame, text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É", command=self.clear_form).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(actions_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=self.show_products_section).pack(side=tk.LEFT)
    
    def create_deploy_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–µ–ø–ª–æ—è"""
        self.deploy_frame = ttk.Frame(self.content_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(self.deploy_frame, text="–î–µ–ø–ª–æ–π –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è", font=self.font_header).pack(anchor=tk.W, pady=(0, 20))
        
        # –û–ø—Ü–∏–∏ –¥–µ–ø–ª–æ—è
        deploy_options = ttk.LabelFrame(self.deploy_frame, text="–û–ø—Ü–∏–∏ –¥–µ–ø–ª–æ—è")
        deploy_options.pack(fill=tk.X, pady=(0, 20))
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        server_frame = ttk.Frame(deploy_options)
        server_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(server_frame, text="–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:").pack(side=tk.LEFT)
        self.server_port_var = tk.StringVar(value="8005")
        ttk.Entry(server_frame, textvariable=self.server_port_var, width=10).pack(side=tk.LEFT, padx=(10, 10))
        
        self.server_button = ttk.Button(server_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", command=self.toggle_server)
        self.server_button.pack(side=tk.LEFT)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è
        deploy_frame = ttk.Frame(deploy_options)
        deploy_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(deploy_frame, text="üêô GitHub Pages", command=self.github_deploy).pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(self.deploy_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", font=self.font_base)
        self.status_label.pack(anchor=tk.W, pady=(20, 0))
    
    def show_products_section(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤"""
        self.hide_all_sections()
        self.products_frame.pack(fill=tk.BOTH, expand=True)
        self.current_section = 'products'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Ä–∞–∑–¥–µ–ª–∞ "–ì–ª–∞–≤–Ω–∞—è"
        self.filter_by_section('home')
    
    def show_add_section(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        self.hide_all_sections()
        self.add_frame.pack(fill=tk.BOTH, expand=True)
        self.current_section = 'add'
    
    def show_deploy_section(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é –¥–µ–ø–ª–æ—è"""
        self.hide_all_sections()
        self.deploy_frame.pack(fill=tk.BOTH, expand=True)
        self.current_section = 'deploy'
    
    def hide_all_sections(self):
        """–°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏"""
        self.products_frame.pack_forget()
        self.add_frame.pack_forget()
        self.deploy_frame.pack_forget()
    
    def refresh_products_list(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for item in self.products_tree.get_children():
            self.products_tree.delete(item)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        if hasattr(self, 'current_section') and self.current_section in ['home', 'nessffo']:
            self.filter_by_section(self.current_section)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Ä–∞–∑–¥–µ–ª–∞ "–ì–ª–∞–≤–Ω–∞—è"
            self.filter_by_section('home')
    
    def filter_by_section(self, section):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É"""
        self.current_section = section
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        for section_id, btn in self.section_buttons.items():
            if section_id == section:
                btn.configure(style='Accent.TButton')
            else:
                btn.configure(style='TButton')
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for item in self.products_tree.get_children():
            self.products_tree.delete(item)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–∞–∑–¥–µ–ª—É
        filtered_products = [p for p in self.products if p.get('section', 'home') == section]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
        sorted_filtered_products = sorted(filtered_products, key=lambda x: int(x.get('order', '0')))
        
        for product in sorted_filtered_products:
            status_icon = "‚úÖ" if product.get('status') == 'stock' else "‚è≥"
            images_str = product.get('images', '')
            images_count = len(images_str.split(',')) if images_str else 0
            
            self.products_tree.insert('', 'end', values=(
                product.get('id', ''),
                product.get('title', ''),
                product.get('price', ''),
                f"{status_icon} {product.get('status', '')}",
                f"{images_count} —Ñ–∞–π–ª–æ–≤",
                product.get('section', 'home'),
                product.get('order', '1')
            ))
    
    def apply_search(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"""
        search_term = self.search_var.get().lower()
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for item in self.products_tree.get_children():
            self.products_tree.delete(item)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        for product in self.products:
            if (search_term in product.get('title', '').lower() or 
                search_term in product.get('desc', '').lower() or
                search_term in product.get('id', '').lower()):
                
                status_icon = "‚úÖ" if product.get('status') == 'stock' else "‚è≥"
                images_str = product.get('images', '')
                images_count = len(images_str.split(',')) if images_str else 0
                
                self.products_tree.insert('', 'end', values=(
                    product.get('id', ''),
                    product.get('title', ''),
                    product.get('price', ''),
                    f"{status_icon} {product.get('status', '')}",
                    f"{images_count} —Ñ–∞–π–ª–æ–≤",
                    product.get('section', 'home'),
                    product.get('order', '1')
                ))
    
    def edit_selected_product(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"""
        print("üîç –§—É–Ω–∫—Ü–∏—è edit_selected_product –≤—ã–∑–≤–∞–Ω–∞")
        
        selection = self.products_tree.selection()
        print(f"üîç –í—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {selection}")
        
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
        item = self.products_tree.item(selection[0])
        product_id = item['values'][0]
        print(f"üîç ID —Ç–æ–≤–∞—Ä–∞: {product_id}")
        print(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –≤ –¥–∞–Ω–Ω—ã—Ö: {[p.get('id') for p in self.products]}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
        product = None
        for p in self.products:
            if str(p.get('id', '')) == str(product_id):
                product = p
                break
        
        print(f"üîç –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product}")
        
        if product:
            print("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            self.show_edit_dialog(product)
        else:
            print("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def show_edit_dialog(self, product):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üîç –§—É–Ω–∫—Ü–∏—è show_edit_dialog –≤—ã–∑–≤–∞–Ω–∞")
        print(f"üîç –¢–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {product}")
        
        dialog = tk.Toplevel(self.root)
        dialog.title(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {product['title']}")
        dialog.geometry("800x700")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º
        canvas = tk.Canvas(dialog)
        scrollbar = ttk.Scrollbar(dialog, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        form_frame = ttk.Frame(scrollable_frame, padding=20)
        form_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(form_frame, text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product['title']}", 
                 font=self.font_header).pack(anchor=tk.W, pady=(0, 20))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        # –û—á–∏—â–∞–µ–º —Ü–µ–Ω—É –æ—Ç "—Ä." –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        price_value = product.get('price', '')
        if price_value and '—Ä.' in price_value:
            price_value = price_value.replace('—Ä.', '').strip()
        
        fields = [
            ('ID:', 'id', product.get('id', '')),
            ('–ù–∞–∑–≤–∞–Ω–∏–µ:', 'title', product.get('title', '')),
            ('–¶–µ–Ω–∞:', 'price', price_value),
            ('–û–ø–∏—Å–∞–Ω–∏–µ:', 'desc', product.get('desc', '')),
            ('–°–æ—Å—Ç–∞–≤:', 'meta', product.get('meta', '')),
            ('–°—Å—ã–ª–∫–∞:', 'link', product.get('link', ''))
        ]
        
        edit_vars = {}
        for label, field, value in fields:
            frame = ttk.Frame(form_frame)
            frame.pack(fill=tk.X, pady=5)
            
            ttk.Label(frame, text=label, width=15).pack(side=tk.LEFT)
            var = tk.StringVar(value=value)
            entry = ttk.Entry(frame, textvariable=var, width=50)
            entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
            
            edit_vars[field] = var
        
        # –°—Ç–∞—Ç—É—Å
        status_frame = ttk.Frame(form_frame)
        status_frame.pack(fill=tk.X, pady=10)
        ttk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å:", width=15).pack(side=tk.LEFT)
        status_var = tk.StringVar(value=product.get('status', 'preorder'))
        ttk.Radiobutton(status_frame, text="–ü–æ–¥ –∑–∞–∫–∞–∑", variable=status_var, value="preorder").pack(side=tk.LEFT, padx=(0, 10))
        ttk.Radiobutton(status_frame, text="–í –Ω–∞–ª–∏—á–∏–∏", variable=status_var, value="stock").pack(side=tk.LEFT)
        
        # –†–∞–∑–¥–µ–ª
        section_frame = ttk.Frame(form_frame)
        section_frame.pack(fill=tk.X, pady=10)
        ttk.Label(section_frame, text="–†–∞–∑–¥–µ–ª:", width=15).pack(side=tk.LEFT)
        section_var = tk.StringVar(value=product.get('section', 'home'))
        ttk.Radiobutton(section_frame, text="–ì–ª–∞–≤–Ω–∞—è", variable=section_var, value="home").pack(side=tk.LEFT, padx=(0, 10))
        ttk.Radiobutton(section_frame, text="Nessffo", variable=section_var, value="nessffo").pack(side=tk.LEFT)
        
        # –ü–æ—Ä—è–¥–æ–∫
        order_frame = ttk.Frame(form_frame)
        order_frame.pack(fill=tk.X, pady=10)
        ttk.Label(order_frame, text="–ü–æ—Ä—è–¥–æ–∫:", width=15).pack(side=tk.LEFT)
        order_var = tk.StringVar(value=str(product.get('order', '1')))
        order_entry = ttk.Entry(order_frame, textvariable=order_var, width=10)
        order_entry.pack(side=tk.LEFT)
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images_frame = ttk.LabelFrame(form_frame, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", padding=10)
        images_frame.pack(fill=tk.X, pady=10)
        
        # –¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        current_images = product.get('images', '')
        if isinstance(current_images, str):
            current_images = current_images.split(',') if current_images else []
        
        ttk.Label(images_frame, text="–¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:").pack(anchor=tk.W, pady=(0, 5))
        
        # –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_listbox = tk.Listbox(images_frame, height=6)
        images_listbox.pack(fill=tk.X, pady=(0, 10))
        
        for img in current_images:
            if img.strip():
                images_listbox.insert(tk.END, img.strip())
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_buttons = ttk.Frame(images_frame)
        images_buttons.pack(fill=tk.X)
        
        def add_image():
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png")]
            )
            if file_path:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                product_id = product.get('id', '')
                if product_id:
                    try:
                        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É (–æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞)
                        product_folder = os.path.join(self.images_dir, f'product_{product_id}')
                        os.makedirs(product_folder, exist_ok=True)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞
                        existing_files = [f for f in os.listdir(product_folder) if f.startswith(f'product_{product_id}_') and f.endswith('.jpg')]
                        next_number = len(existing_files) + 1
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                        new_filename = f'product_{product_id}_{next_number}.jpg'
                        new_path = os.path.join(product_folder, new_filename)
                        
                        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
                        shutil.copy2(file_path, new_path)
                        
                        # –¢–∞–∫–∂–µ –∫–æ–ø–∏—Ä—É–µ–º –≤ web_combined_working
                        web_product_folder = os.path.join(self.web_dir, 'img', f'product_{product_id}')
                        os.makedirs(web_product_folder, exist_ok=True)
                        web_new_path = os.path.join(web_product_folder, new_filename)
                        shutil.copy2(file_path, web_new_path)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Å–ø–∏—Å–æ–∫
                        correct_path = f'product_{product_id}/{new_filename}'
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ (–Ω–µ –∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
                        images_listbox.insert(tk.END, correct_path)
                        
                        print(f"üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {os.path.basename(file_path)} ‚Üí {new_filename}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {new_filename}")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ç–æ–≤–∞—Ä–∞")
        
        def remove_image():
            selection = images_listbox.curselection()
            if selection:
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                image_path = images_listbox.get(selection[0])
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –∏–∑ –æ–±–µ–∏—Ö –ø–∞–ø–æ–∫
                web_full_path = os.path.join(self.web_dir, 'img', image_path)
                main_full_path = os.path.join(self.images_dir, image_path)
                
                if os.path.exists(web_full_path):
                    try:
                        os.remove(web_full_path)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∏–∑ web: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ web {image_path}: {e}")
                
                if os.path.exists(main_full_path):
                    try:
                        os.remove(main_full_path)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∏–∑ main: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ main {image_path}: {e}")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                images_listbox.delete(selection)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.root.after(100, lambda: self.update_data_local())
        
        def move_up():
            selection = images_listbox.curselection()
            if selection and selection[0] > 0:
                text = images_listbox.get(selection[0])
                images_listbox.delete(selection[0])
                images_listbox.insert(selection[0] - 1, text)
                images_listbox.selection_set(selection[0] - 1)
        
        def move_down():
            selection = images_listbox.curselection()
            if selection and selection[0] < images_listbox.size() - 1:
                text = images_listbox.get(selection[0])
                images_listbox.delete(selection[0])
                images_listbox.insert(selection[0] + 1, text)
                images_listbox.selection_set(selection[0] + 1)
        
        ttk.Button(images_buttons, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=add_image).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(images_buttons, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=remove_image).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(images_buttons, text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", command=move_up).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(images_buttons, text="‚¨áÔ∏è –í–Ω–∏–∑", command=move_down).pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_frame = ttk.Frame(form_frame)
        buttons_frame.pack(fill=tk.X, pady=(20, 0))
        
        def save_changes():
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                for field, var in edit_vars.items():
                    value = var.get()
                    # –î–æ–±–∞–≤–ª—è–µ–º "—Ä." –∫ —Ü–µ–Ω–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if field == 'price' and value and not value.endswith('—Ä.'):
                        value = f"{value} —Ä."
                    product[field] = value
                product['status'] = status_var.get()
                product['section'] = section_var.get()
                product['order'] = int(order_var.get()) if order_var.get().isdigit() else 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                images_list = []
                for i in range(images_listbox.size()):
                    images_list.append(images_listbox.get(i))
                product['images'] = ','.join(images_list)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                product['updated'] = datetime.now().isoformat()
                
                self.save_products()
                self.refresh_products_list()
                dialog.destroy()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: {e}")
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_changes, 
                  style='Accent.TButton').pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side=tk.LEFT)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def delete_selected_product(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
        item = self.products_tree.item(selection[0])
        product_id = str(item['values'][0])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        product_title = item['values'][1]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        product_to_delete = None
        for p in self.products:
            if str(p.get('id', '')) == product_id:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
                product_to_delete = p
                break
        
        if not product_to_delete:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{product_title}'?"):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–¥–µ–ª –∏ order —É–¥–∞–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        deleted_section = product_to_delete.get('section', 'home')
        deleted_order = int(product_to_delete.get('order', '1'))
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        try:
            product_images = product_to_delete.get('images', '')
            if product_images:
                # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–∞
                product_folder = os.path.join(self.web_dir, 'img', f'product_{product_id}')
                if os.path.exists(product_folder):
                    shutil.rmtree(product_folder)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {product_folder}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
        self.products = [p for p in self.products if p.get('id') != product_id]
        
        # –°–¥–≤–∏–≥–∞–µ–º order –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–æ–º –∂–µ —Ä–∞–∑–¥–µ–ª–µ —Å –±–æ–ª—å—à–∏–º order –Ω–∞ -1
        for p in self.products:
            if p.get('section') == deleted_section:
                current_order = int(p.get('order', '0'))
                if current_order > deleted_order:
                    p['order'] = str(current_order - 1)
        
        self.save_products()
        self.refresh_products_list()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")
    
    def select_images_folder(self):
        """–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        if folder:
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            self.images_listbox.delete(0, tk.END)
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏
            product_id = self.form_vars['product_id_var'].get().strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—É—Ç—è–º–∏
            for file in sorted(os.listdir(folder)):
                if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                    image_path = f"{product_id}/{file}"
                    self.images_listbox.insert(tk.END, image_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
            self.selected_images_folder = folder
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            count = len([f for f in os.listdir(folder) if f.lower().endswith(('.jpg', '.jpeg', '.png'))])
            messagebox.showinfo("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", f"–î–æ–±–∞–≤–ª–µ–Ω–æ {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    def add_single_image(self):
        """–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤)"""
        file_paths = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png")]
        )
        if file_paths:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏
            product_id = self.form_vars['product_id_var'].get().strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if not hasattr(self, 'original_image_paths'):
                self.original_image_paths = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for file_path in file_paths:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
                filename = os.path.basename(file_path)
                image_path = f"{product_id}/{filename}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                self.original_image_paths[image_path] = file_path
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                self.images_listbox.insert(tk.END, image_path)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            messagebox.showinfo("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(file_paths)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    def process_product_images(self, product_id, images_list):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
        print(f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è process_product_images —É—Å—Ç–∞—Ä–µ–ª–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
        return []
    
    def update_order_display(self, *args):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ order –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞"""
        if hasattr(self, 'section_var') and hasattr(self, 'order_display_var'):
            section = self.section_var.get()
            section_products = [p for p in self.products if p.get('section') == section]
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order –≤ —Ä–∞–∑–¥–µ–ª–µ
            max_order = 0
            for p in section_products:
                try:
                    current_order = int(p.get('order', '0'))
                    max_order = max(max_order, current_order)
                except ValueError:
                    continue
            
            # –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π order
            next_order = max_order + 1
            
            self.order_display_var.set(str(next_order))
    
    def clear_images(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self.images_listbox.delete(0, tk.END)
        self.selected_images_folder = None
        # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        if hasattr(self, 'original_image_paths'):
            self.original_image_paths.clear()
    
    def save_new_product(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not self.form_vars['title_var'].get().strip():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!")
            return
        
        if not self.form_vars['price_var'].get().strip():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID (–æ–Ω —É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω)
        product_id = self.form_vars['product_id_var'].get().strip()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
        link = "https://t.me/stub123"
        
        # –î–æ–±–∞–≤–ª—è–µ–º "—Ä." –∫ —Ü–µ–Ω–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        price = self.form_vars['price_var'].get().strip()
        if price and not price.endswith('—Ä.'):
            price = f"{price} —Ä."
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º order –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        section = self.section_var.get()
        section_products = [p for p in self.products if p.get('section') == section]
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order –≤ —Ä–∞–∑–¥–µ–ª–µ
        max_order = 0
        for p in section_products:
            try:
                current_order = int(p.get('order', '0'))
                max_order = max(max_order, current_order)
            except ValueError:
                continue
        
        # –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π order
        next_order = max_order + 1
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        product = {
            'id': product_id,
            'title': self.form_vars['title_var'].get().strip(),
            'price': price,
            'desc': self.form_vars['desc_var'].get().strip(),
            'meta': self.form_vars['meta_var'].get().strip(),
            'link': link,
            'status': self.status_var.get(),
            'section': section,
            'order': str(next_order),
            'images': [],
            'updated': datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
        images_list = []
        for i in range(self.images_listbox.size()):
            image_path = self.images_listbox.get(i)
            if image_path.strip():
                # –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç product_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
                if image_path.startswith(f"{product_id}/"):
                    images_list.append(image_path.strip())
                else:
                    # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º product_id –∫ –ø—É—Ç–∏
                    images_list.append(f"{product_id}/{image_path.strip()}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        self.products.append(product)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if images_list:
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                product_folder = os.path.join(self.web_dir, 'img', f'product_{product_id}')
                os.makedirs(product_folder, exist_ok=True)
                
                processed_images = []
                
                # –ö–æ–ø–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for i, image_path in enumerate(images_list, 1):
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    original_path = None
                    
                    if hasattr(self, 'selected_images_folder') and self.selected_images_folder:
                        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏
                        original_filename = os.path.basename(image_path)
                        original_path = os.path.join(self.selected_images_folder, original_filename)
                    elif hasattr(self, 'original_image_paths') and image_path in self.original_image_paths:
                        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –æ–¥–Ω–æ–º—É
                        original_path = self.original_image_paths[image_path]
                    elif hasattr(self, 'original_image_paths'):
                        # –ò—â–µ–º –ø–æ –±–∞–∑–æ–≤–æ–º—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                        base_name = os.path.basename(image_path)
                        for stored_path, original_path in self.original_image_paths.items():
                            if os.path.basename(stored_path) == base_name:
                                break
                        else:
                            original_path = None
                    elif os.path.exists(image_path):
                        # –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                        original_path = image_path
                    else:
                        original_path = None
                    
                    if original_path and os.path.exists(original_path):
                        # –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                        new_filename = f'product_{product_id}_{i}.jpg'
                        new_path = os.path.join(product_folder, new_filename)
                        
                        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                        shutil.copy2(original_path, new_path)
                        print(f"üì∏ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {os.path.basename(original_path)} ‚Üí {new_filename}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Å–ø–∏—Å–∫—É
                        processed_images.append(f'product_{product_id}/{new_filename}')
                    else:
                        print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
                
                if processed_images:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ —Ç–æ–≤–∞—Ä–µ
                    product['images'] = ','.join(processed_images)
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
                else:
                    product['images'] = ''
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
                if hasattr(self, 'original_image_paths'):
                    self.original_image_paths.clear()
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
                product['images'] = ''
        else:
            product['images'] = ''
        
        self.save_products()
        
        self.refresh_products_list()
        
        # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        self.clear_form()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢–æ–≤–∞—Ä '{product['title']}' –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    def clear_form(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É"""
        for var_name, var in self.form_vars.items():
            if var_name == 'product_id_var':
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID
                max_id = 0
                for p in self.products:
                    try:
                        p_id = int(p.get('id', '0'))
                        max_id = max(max_id, p_id)
                    except ValueError:
                        continue
                next_id = str(max_id + 1)
                var.set(next_id)
            else:
                var.set('')
        self.status_var.set('preorder')
        self.section_var.set('home')
        self.clear_images()
    
    def update_app_js(self):
        """–û–±–Ω–æ–≤–∏—Ç—å app.min.js —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        if not os.path.exists(self.web_dir):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ {self.web_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        app_js_path = os.path.join(self.web_dir, "app.min.js")
        if not os.path.exists(app_js_path):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª {app_js_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
            with open(app_js_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
            products_json = json.dumps(self.products, ensure_ascii=False, indent=2)
            
            # –ó–∞–º–µ–Ω—è–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
            pattern = r'const products = \[.*?\];'
            replacement = f'const products = {products_json};'
            
            if re.search(pattern, content, re.DOTALL):
                new_content = re.sub(pattern, replacement, content, flags=re.DOTALL)
                
                # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
                backup_path = f"{app_js_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                shutil.copy2(app_js_path, backup_path)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                with open(app_js_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"app.min.js –æ–±–Ω–æ–≤–ª–µ–Ω —Å {len(self.products)} —Ç–æ–≤–∞—Ä–∞–º–∏!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ app.min.js")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è app.min.js: {e}")
    
    def update_data_local(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ –¥–µ–ø–ª–æ—è)"""
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º products.json –≤ web_combined_working
            if os.path.exists(self.products_file):
                web_products_file = os.path.join(self.web_dir, 'products.json')
                shutil.copy2(self.products_file, web_products_file)
                print(f"‚úÖ {self.products_file} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {self.web_dir}")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–§–∞–π–ª {self.products_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if os.path.exists(self.images_dir):
                web_img_dir = os.path.join(self.web_dir, 'img')
                if os.path.exists(web_img_dir):
                    shutil.rmtree(web_img_dir)
                shutil.copytree(self.images_dir, web_img_dir)
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ {self.web_dir}")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ü–∞–ø–∫–∞ {self.images_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º app.min.js
            js_updated = False
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_script = os.path.join(self.web_dir, 'update_data_only.py')
            
            if os.path.exists(update_script):
                print(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_script}")
                result = subprocess.run(['python3', update_script], 
                                      capture_output=True, text=True, cwd=self.web_dir)
                
                if result.returncode == 0:
                    print("‚úÖ app.min.js –æ–±–Ω–æ–≤–ª–µ–Ω")
                    js_updated = True
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {result.stderr}")
            else:
                print(f"‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {update_script}")
            
            if not js_updated:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å app.min.js")
                return
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                              "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ!\n\n"
                              "‚úÖ products.json —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω\n"
                              "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n"
                              "‚úÖ app.min.js –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
                              "–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üöÄ –û–±–Ω–æ–≤–∏—Ç—å + –î–µ–ø–ª–æ–π'")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def update_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–µ–ø–ª–æ–µ–º –Ω–∞ GitHub"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
            self.update_data_local()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –Ω–∞ GitHub
            print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è –Ω–∞ GitHub...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ github_deploy.py
            if os.path.exists('github_deploy.py'):
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GitHub –¥–µ–ø–ª–æ–µ—Ä
                from github_deploy import GitHubDeployer
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ–ø–ª–æ–µ—Ä–∞
                deployer = GitHubDeployer()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
                success = deployer.deploy(auto_commit=True, open_desktop=False)
                
                if success:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", 
                                      "üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n\n"
                                      "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n"
                                      "‚úÖ app.min.js –æ–±–Ω–æ–≤–ª–µ–Ω\n"
                                      "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub\n\n"
                                      "–°–∞–π—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", 
                                       "‚ùå –î–µ–ø–ª–æ–π –Ω–∞ GitHub –Ω–µ —É–¥–∞–ª—Å—è.\n\n"
                                       "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n"
                                       "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                                  "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ\n\n"
                                  "–§–∞–π–ª github_deploy.py –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                                  "–î–µ–ø–ª–æ–π –Ω–∞ GitHub –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def show_preview_window(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        if not os.path.exists(self.web_dir):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ {self.web_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
            if self.web_server:
                self.web_server.terminate()
                self.web_server = None
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
            self.web_server = subprocess.Popen(['python3', '-m', 'http.server', '8005'], 
                                             cwd=self.web_dir, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            import webbrowser
            webbrowser.open('http://localhost:8005')
            
            messagebox.showinfo("–ü—Ä–æ—Å–º–æ—Ç—Ä", 
                              "üåê –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n\n"
                              "–°–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ –∞–¥—Ä–µ—Å—É:\n"
                              "http://localhost:8005\n\n"
                              "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –æ–∫–Ω–æ.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: {e}")
    
    def toggle_server(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"""
        if self.web_server is None:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            try:
                port = self.server_port_var.get()
                self.web_server = subprocess.Popen(['python3', '-m', 'http.server', port], 
                                                 cwd=self.web_dir, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                self.server_button.configure(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
                self.status_label.configure(text=f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: {e}")
        else:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            self.web_server.terminate()
            self.web_server = None
            self.server_button.configure(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
            self.status_label.configure(text="–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def create_deploy_package(self):
        """–°–æ–∑–¥–∞—Ç—å –ø–∞–∫–µ—Ç –¥–ª—è –¥–µ–ø–ª–æ—è (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                          "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP –ø–∞–∫–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n\n"
                          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üêô GitHub Pages' –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–µ–ø–ª–æ—è –Ω–∞ GitHub Pages.\n\n"
                          "–≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ!")
    
    def github_deploy(self):
        """–î–µ–ø–ª–æ–π –Ω–∞ GitHub Pages"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ github_deploy.py
            if os.path.exists('github_deploy.py'):
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GitHub –¥–µ–ø–ª–æ–µ—Ä
                from github_deploy import GitHubDeployer
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ–ø–ª–æ–µ—Ä–∞
                deployer = GitHubDeployer()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
                success = deployer.deploy(auto_commit=True, open_desktop=False)
                
                if success:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", 
                                      "üéâ GitHub –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                                      "–°–∞–π—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", 
                                       "‚ùå GitHub –¥–µ–ø–ª–æ–π –Ω–µ —É–¥–∞–ª—Å—è.\n\n"
                                       "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª github_deploy.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ GitHub –¥–µ–ø–ª–æ–µ:\n{e}")
    
    def manage_images(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        messagebox.showinfo("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
                          "üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏\n\n"
                          "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–∞:\n"
                          "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ\n"
                          "2. –ù–∞–∂–º–∏—Ç–µ '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'\n"
                          "3. –í –¥–∏–∞–ª–æ–≥–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:\n"
                          "   ‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                          "   ‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                          "   ‚Ä¢ ‚¨ÜÔ∏è –í–≤–µ—Ä—Ö / ‚¨áÔ∏è –í–Ω–∏–∑ - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫")

def main():
    root = tk.Tk()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
    style = ttk.Style()
    style.theme_use('clam')
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    style.configure('Accent.TButton', 
                   background='#007bff', 
                   foreground='white',
                   font=('Arial', 11))
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = PlatformaManagerModern(root)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    root.mainloop()

if __name__ == "__main__":
    main()
